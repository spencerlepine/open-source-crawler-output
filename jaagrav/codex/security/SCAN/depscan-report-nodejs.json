{"id": "CVE-2021-44906", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<1.2.6", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23518", "package": "npm:cached-path-relative", "package_type": "npm", "package_usage": "optional", "version": "<1.1.0", "fix_version": "1.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in cached path relative\nThe package cached path relative before 1.1.0 is vulnerable to Prototype Pollution via the cache variable that is set as {} instead of Object.create(null) in the cachedPathRelative function, which allows access to the parent prototype properties when the object is used to create the cached relative path. When using the origin path as __proto__, the attribute of the object is accessed instead of a path. **Note:** This vulnerability derives from an incomplete fix in https://security.snyk.io/vuln/SNYK JS CACHEDPATHRELATIVE 72573\nUpgrade to version 1.1.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23343", "package": "npm:path-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.0.7", "fix_version": "1.0.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in path parse\nAffected versions of npm package `path parse` are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst case time complexity.\nUpgrade to version 1.0.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23362", "package": "npm:hosted-git-info", "package_type": "npm", "package_usage": "optional", "version": "<2.8.9", "fix_version": "2.8.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in hosted git info\nThe npm package `hosted git info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst case time complexity\nUpgrade to version 2.8.9 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7751", "package": "npm:pathval", "package_type": "npm", "package_usage": "optional", "version": "<1.1.1", "fix_version": "1.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype pollution in pathval\nA prototype pollution vulnerability affects all versions of package pathval under 1.1.1.\nUpgrade to version 1.1.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21670", "package": "npm:markdown-it", "package_type": "npm", "package_usage": "optional", "version": "<12.3.2", "fix_version": "12.3.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Uncontrolled Resource Consumption in markdown it\n### Impact\n\nSpecial patterns with length > 50K chars can slow down parser significantly.\n\n```js\nconst md = require('markdown it')();\n\nmd.render(`x ${' '.repeat(150000)} x   nx`);\n```\n\n\n### Patches\n\nUpgrade to v12.3.2+\n\n### Workarounds\n\nNo.\n\n### References\n\nFix + test sample: https://github.com/markdown it/markdown it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101\n\nUpgrade to version 12.3.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7774", "package": "npm:y18n", "package_type": "npm", "package_usage": "optional", "version": "<3.2.2", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in y18n\n### Overview\n\nThe npm package `y18n` before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. \n\n### POC\n\n```\nconst y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n```\n\n### Recommendation\n\nUpgrade to version 3.2.2, 4.0.1, 5.0.5 or later.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8203", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.20", "fix_version": "4.17.20", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires zipping objects based on user provided property arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nUpgrade to version 4.17.20 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37713", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some path`.  If the drive letter does not match the extraction target, for example `D: extraction dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37712", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi code point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, ` ` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37701", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.16", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both ` ` and `/` characters as path separators, however ` ` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing ` ` with `/` on Windows systems, and leaving ` ` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case insensitively.  This _may_ result in undue cache misses on case sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well tested method such as `path.resolve()` before comparing paths to one another.\nUpgrade to version 4.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32804", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": ">=4.0.0-<4.4.14", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE 2021 32803 (https://github.com/npm/node tar/security/advisories/GHSA r628 mhmh qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE 2021 32803 as well if this adjacent issue affects your `node tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 4.4.14 or later\n            ", "related_urls": []}
{"id": "CVE-2021-33623", "package": "npm:trim-newlines", "package_type": "npm", "package_usage": "optional", "version": "<3.0.1", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in trim newlines\n@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial of service (ReDoS) for the .end() method.\nUpgrade to version 3.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8244", "package": "npm:bl", "package_type": "npm", "package_usage": "optional", "version": "<1.2.3", "fix_version": "1.2.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Remote Memory Exposure in bl\nA buffer over read vulnerability exists in bl <4.0.3, <3.0.1, <2.2.1, and <1.2.3 which could allow an attacker to supply user input (even typed) that if it ends up in consume() argument and can become negative, the BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular .slice() calls.\nUpgrade to version 1.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2021-43138", "package": "npm:async", "package_type": "npm", "package_usage": "optional", "version": ">=2.0.0-<2.6.4", "fix_version": "2.6.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in async\nA vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.\nUpgrade to version 2.6.4 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32803", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": ">=4.0.0-<4.4.15", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 4.4.15 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7608", "package": "npm:yargs-parser", "package_type": "npm", "package_usage": "optional", "version": "<=5.0.0", "fix_version": "5.0.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# yargs parser Vulnerable to Prototype Pollution\nAffected versions of `yargs parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.\nUpgrade to version 5.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28469", "package": "npm:glob-parent", "package_type": "npm", "package_usage": "optional", "version": "<5.1.2", "fix_version": "5.1.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# glob parent before 5.1.2 vulnerable to Regular Expression Denial of Service in enclosure regex\nThis affects the package glob parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.\nUpgrade to version 5.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7788", "package": "npm:ini", "package_type": "npm", "package_usage": "optional", "version": "<1.3.6", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__ \npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf 8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\nUpgrade to version 1.3.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-29060", "package": "npm:color-string", "package_type": "npm", "package_usage": "optional", "version": "<1.5.5", "fix_version": "1.5.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDOS)\nIn the npm package `color string`, there is a  ReDos (Regular Expression Denial of Service) vulnerability regarding an exponential time complexity for\nlinearly increasing input lengths for `hwb()` color strings.\n\nStrings reaching more than 5000 characters would see several\nmilliseconds of processing time; strings reaching more than\n50,000 characters began seeing 1500ms (1.5s) of processing time.\n\nThe cause was due to a the regular expression that parses\nhwb() strings   specifically, the hue value   where\nthe integer portion of the hue value used a 0 or more quantifier\nshortly thereafter followed by a 1 or more quantifier.\n\nThis caused excessive backtracking and a cartesian scan,\nresulting in exponential time complexity given a linear\nincrease in input length.\nUpgrade to version 1.5.5 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15366", "package": "npm:ajv", "package_type": "npm", "package_usage": "optional", "version": "<6.12.3", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\nUpgrade to version 6.12.3 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28503", "package": "npm:copy-props", "package_type": "npm", "package_usage": "optional", "version": "<2.0.5", "fix_version": "2.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in copy props\nThe package copy props before 2.0.5 are vulnerable to Prototype Pollution via the main functionality.\nUpgrade to version 2.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28498", "package": "npm:elliptic", "package_type": "npm", "package_usage": "optional", "version": "<6.5.4", "fix_version": "6.5.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Use of a Broken or Risky Cryptographic Algorithm\nThe npm package `elliptic` before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.\nUpgrade to version 6.5.4 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23337", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28500", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" for (var i = 0; i < n; i++) { ret += \" \" } return ret + \"1\"; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now()   time0; console.log(\"time_cost0: \" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now()   time1; console.log(\"time_cost1: \" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now()   time2; console.log(\"time_cost2: \" + time_cost2)\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23358", "package": "npm:underscore", "package_type": "npm", "package_usage": "optional", "version": ">=1.3.2-<1.12.1", "fix_version": "1.12.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Arbitrary Code Execution in underscore\nThe package `underscore` from 1.13.0 0 and before 1.13.0 2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized.\nUpgrade to version 1.12.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21681", "package": "npm:marked", "package_type": "npm", "package_usage": "optional", "version": "<4.0.10", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x : x\n\n  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n  https://marked.js.org/using_advanced#workers\n  https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21680", "package": "npm:marked", "package_type": "npm", "package_usage": "optional", "version": "<4.0.10", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x :${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n  https://marked.js.org/using_advanced#workers\n  https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3807", "package": "npm:ansi-regex", "package_type": "npm", "package_usage": "optional", "version": ">=5.0.0-<5.0.1", "fix_version": "4.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in chalk/ansi regex\nansi regex is vulnerable to Inefficient Regular Expression Complexity which could lead to a denial of service.\nUpgrade to version 5.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "package_type": "npm", "package_usage": "optional", "version": "<3.0.5", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nUpgrade to version 3.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-42740", "package": "npm:shell-quote", "package_type": "npm", "package_usage": "optional", "version": "<=1.7.2", "fix_version": "1.7.3", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Improper Neutralization of Special Elements used in a Command in Shell quote\nThe shell quote package before 1.7.3 for Node.js allows command injection. An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with exec(), an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is {A z  instead of the correct {A Za z . Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.\nUpgrade to version 1.7.3 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28472", "package": "npm:aws-sdk", "package_type": "npm", "package_usage": "optional", "version": "<2.814.0", "fix_version": "2.814.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution via file load in aws sdk and @aws sdk/shared ini file loader\nThis affects the package @aws sdk/shared ini file loader before 1.0.0 rc.9; the package aws sdk before 2.814.0. If an attacker submits a malicious INI file to an application that parses it with loadSharedConfigFiles , they will pollute the prototype on the application. This can be exploited further depending on the context.\nUpgrade to version 2.814.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-33154", "package": "istanbuljs:schema", "package_type": "schema_project", "package_usage": "optional", "version": "<1.13.1", "fix_version": "1.13.1", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "The schema (aka Embedding schema.org vocabulary) extension before 1.13.1 and 2.x before 2.5.1 for TYPO3 allows XSS.", "related_urls": ["https://typo3.org/security/advisory/typo3-ext-sa-2022-012"]}
