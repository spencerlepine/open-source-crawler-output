{"id": "CVE-2021-23518", "package": "npm:cached-path-relative", "purl": "pkg:npm/cached-path-relative@1.0.1", "package_type": "npm", "package_usage": "N/A", "version": "1.0.1", "fix_version": "1.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in cached path relative\nThe package cached path relative before 1.1.0 is vulnerable to Prototype Pollution via the cache variable that is set as {} instead of Object.create(null) in the cachedPathRelative function, which allows access to the parent prototype properties when the object is used to create the cached relative path. When using the origin path as __proto__, the attribute of the object is accessed instead of a path. **Note:** This vulnerability derives from an incomplete fix in https://security.snyk.io/vuln/SNYK JS CACHEDPATHRELATIVE 72573\nUpgrade to version 1.1.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16472", "package": "npm:cached-path-relative", "purl": "pkg:npm/cached-path-relative@1.0.1", "package_type": "npm", "package_usage": "N/A", "version": "1.0.1", "fix_version": "1.0.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in cached path relative\nVersion of `cached path relative` before 1.0.2 are vulnerable to prototype pollution.\n\n\n## Recommendation\n\nUpdate to version 1.0.2 or later.\nUpgrade to version 1.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "purl": "pkg:npm/json-schema@0.2.3", "package_type": "npm", "package_usage": "N/A", "version": "0.2.3", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-21270", "package": "npm:stringstream", "purl": "pkg:npm/stringstream@0.0.5", "package_type": "npm", "package_usage": "N/A", "version": "0.0.5", "fix_version": "0.0.6", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in stringstream\nAll versions of `stringstream` are vulnerable to out of bounds read as it allocates uninitialized Buffers when number is passed in input stream on Node.js 4.x and below.\n\n\n## Recommendation\n\nNo fix is currently available for this vulnerability. It is our recommendation to not install or use this module if user input is being passed in to `stringstream`.\nUpgrade to version 0.0.6 or later\n            ", "related_urls": []}
{"id": "NPM-1085744", "package": "npm:tunnel-agent", "purl": "pkg:npm/tunnel-agent@0.4.3", "package_type": "npm", "package_usage": "N/A", "version": "0.4.3", "fix_version": "0.6.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Memory Exposure in tunnel agent\nVersions of `tunnel agent` before 0.6.0 are vulnerable to memory exposure.\n\nThis is exploitable if user supplied input is provided to the auth value and is a number.\n\nProof of concept:\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http://www.example.com',\n  tunnel: true,\n  proxy:{\n    protocol: 'http:',\n    host:'127.0.0.1',\n    port:8080,\n    auth:USERSUPPLIEDINPUT // number\n  }\n});\n```\n\n\n## Recommendation\n\nUpdate to version 0.6.0 or later.\nUpgrade to version 0.6.0 or later\n            ", "related_urls": []}
{"id": "CVE-2019-13173", "package": "npm:fstream", "purl": "pkg:npm/fstream@1.0.11", "package_type": "npm", "package_usage": "N/A", "version": "1.0.11", "fix_version": "1.0.12", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in fstream\nVersions of `fstream` prior to 1.0.12 are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file. The `fstream.DirWriter()` function is vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 1.0.12 or later.\nUpgrade to version 1.0.12 or later\n            ", "related_urls": []}
{"id": "CVE-2018-20834", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "2.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in tar\nVersions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.\n\n\n## Recommendation\n\nFor tar 4.x, upgrade to version 4.4.2 or later.\nFor tar 2.x, upgrade to version 2.2.2 or later.\nUpgrade to version 2.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23807", "package": "npm:jsonpointer", "purl": "pkg:npm/jsonpointer@4.0.1", "package_type": "npm", "package_usage": "N/A", "version": "4.0.1", "fix_version": "5.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in node jsonpointer\nThis affects the package `jsonpointer` before `5.0.0`. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\nUpgrade to version 5.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37713", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some path`.  If the drive letter does not match the extraction target, for example `D: extraction dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32804", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE 2021 32803 (https://github.com/npm/node tar/security/advisories/GHSA r628 mhmh qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE 2021 32803 as well if this adjacent issue affects your `node tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-31597", "package": "npm:xmlhttprequest-ssl", "purl": "pkg:npm/xmlhttprequest-ssl@1.5.3", "package_type": "npm", "package_usage": "N/A", "version": "1.5.3", "fix_version": "1.6.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Improper Certificate Validation in xmlhttprequest ssl\nThe xmlhttprequest ssl package before 1.6.1 for Node.js disables SSL certificate validation by default, because rejectUnauthorized (when the property exists but is undefined) is considered to be false within the https.request function of Node.js. In other words, no certificate is ever rejected.\nUpgrade to version 1.6.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28502", "package": "npm:xmlhttprequest-ssl", "purl": "pkg:npm/xmlhttprequest-ssl@1.5.3", "package_type": "npm", "package_usage": "N/A", "version": "1.5.3", "fix_version": "1.6.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary Code Injection\nThis affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run.\nUpgrade to version 1.6.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1107", "package": "npm:is-my-json-valid", "purl": "pkg:npm/is-my-json-valid@2.16.0", "package_type": "npm", "package_usage": "N/A", "version": "2.16.0", "fix_version": "2.17.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular expression deinal of service (ReDoS) in is my json valid\nIt was discovered that the is my json valid JavaScript library used an inefficient regular expression to validate JSON fields defined to have email format. A specially crafted JSON file could cause it to consume an excessive amount of CPU time when validated.\nUpgrade to version 2.17.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16113", "package": "npm:parsejson", "purl": "pkg:npm/parsejson@0.0.3", "package_type": "npm", "package_usage": "N/A", "version": "0.0.3", "fix_version": null, "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in parsejson\nAffected versions of `parsejson` are vulnerable to a regular expression denial of service when parsing untrusted user input.\n\n\n## Recommendation\n\nThe `parsejson` package has not been functionally updated since it was initially released.\n\nAdditionally, it provides functionality which is natively included in Node.js, and therefore the native `JSON.parse()` should be used, for both performance and security reasons.\nNone\n            ", "related_urls": []}
{"id": "NPM-1087047", "package": "npm:static-eval", "purl": "pkg:npm/static-eval@0.2.4", "package_type": "npm", "package_usage": "N/A", "version": "0.2.4", "fix_version": "2.0.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Sandbox Breakout / Arbitrary Code Execution in static eval\nVersions of `static eval`prior to 2.0.2 pass untrusted user input directly to the global function constructor, resulting in an arbitrary code execution vulnerability when user input is parsed via the package.\n\n## Proof of concept\n```\nvar evaluate = require('static eval');\nvar parse = require('esprima').parse;\n\nvar src = process.argv[2 ;\nvar payload = '(function({x}){return x.constructor})({x:\"\".sub})(\"console.log(process.env)\")()'\nvar ast = parse(payload).body[0 .expression;\nconsole.log(evaluate(ast, {x:1}));\n```\n\n\n## Recommendation\n\nUpgrade to version 2.0.2 or later.\nUpgrade to version 2.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2016-2537", "package": "npm:is-my-json-valid", "purl": "pkg:npm/is-my-json-valid@2.16.0", "package_type": "npm", "package_usage": "N/A", "version": "2.16.0", "fix_version": "2.17.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in is my json valid\nVersion of `is my json valid` before 1.4.1 or 2.17.2 are vulnerable to regular expression denial of service (ReDoS) via the email validation function.\n\n\n## Recommendation\n\nUpdate to version 1.4.1, 2.17.2 or later.\nUpgrade to version 2.17.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-15010", "package": "npm:tough-cookie", "purl": "pkg:npm/tough-cookie@2.3.2", "package_type": "npm", "package_usage": "N/A", "version": "2.3.2", "fix_version": "2.3.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in tough cookie\nAffected versions of `tough cookie` are susceptible to a regular expression denial of service.\n\nThe amplification on this vulnerability is relatively low   it takes around 2 seconds for the engine to execute on a malicious input which is 50,000 characters in length.\n\nIf node was compiled using the ` DHTTP_MAX_HEADER_SIZE` however, the impact of the vulnerability can be significant, as the primary limitation for the vulnerability is the default max HTTP header length in node.\n\n\n## Recommendation\n\nUpdate to version 2.3.3 or later.\nUpgrade to version 2.3.3 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3750", "package": "npm:deep-extend", "purl": "pkg:npm/deep-extend@0.4.2", "package_type": "npm", "package_usage": "N/A", "version": "0.4.2", "fix_version": "0.5.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in deep extend\nVersions of `deep extend` before 0.5.1 are vulnerable to prototype pollution.\n\n\n## Recommendation\n\nUpdate to version 0.5.1 or later.\nUpgrade to version 0.5.1 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1000620", "package": "npm:cryptiles", "purl": "pkg:npm/cryptiles@2.0.5", "package_type": "npm", "package_usage": "N/A", "version": "2.0.5", "fix_version": "4.1.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Insufficient Entropy in cryptiles\nVersions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.\n\n\n## Recommendation\n\nUpgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.\nUpgrade to version 4.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3737", "package": "npm:sshpk", "purl": "pkg:npm/sshpk@1.13.0", "package_type": "npm", "package_usage": "N/A", "version": "1.13.0", "fix_version": "1.13.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in sshpk\nVersions of `sshpk` before 1.13.2 or 1.14.1 are vulnerable to regular expression denial of service when parsing crafted invalid public keys.\n\n\n## Recommendation\n\nUpdate to version 1.13.2, 1.14.1 or later.\nUpgrade to version 1.13.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16226", "package": "npm:static-eval", "purl": "pkg:npm/static-eval@0.2.4", "package_type": "npm", "package_usage": "N/A", "version": "0.2.4", "fix_version": "2.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Sandbox Breakout / Arbitrary Code Execution in static eval\nAffected versions of `static eval` pass untrusted user input directly to the global function constructor, resulting in an arbitrary code execution vulnerability when user input is parsed via the package.\n\n## Proof of concept\n```\nvar evaluate = require('static eval');\nvar parse = require('esprima').parse;\nvar src = '(function(){console.log(process.pid)})()';\nvar ast = parse(src).body[0 .expression;\nvar res = evaluate(ast, {});\n// Will print the process id\n```\n\n\n## Recommendation\n\nUpdate to version 2.0.0 or later.\nUpgrade to version 2.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3728", "package": "npm:hoek", "purl": "pkg:npm/hoek@2.16.3", "package_type": "npm", "package_usage": "N/A", "version": "2.16.3", "fix_version": "4.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in hoek\nVersions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.\n\n\n## Recommendation\n\nUpdate to version 4.2.1, 5.0.3 or later.\nUpgrade to version 4.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-42740", "package": "npm:shell-quote", "purl": "pkg:npm/shell-quote@1.6.1", "package_type": "npm", "package_usage": "N/A", "version": "1.6.1", "fix_version": "1.7.3", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Improper Neutralization of Special Elements used in a Command in Shell quote\nThe shell quote package before 1.7.3 for Node.js allows command injection. An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with exec(), an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is {A z  instead of the correct {A Za z . Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.\nUpgrade to version 1.7.3 or later\n            ", "related_urls": []}
{"id": "CVE-2022-38900", "package": "npm:decode-uri-component", "purl": "pkg:npm/decode-uri-component@0.2.0", "package_type": "npm", "package_usage": "N/A", "version": "0.2.0", "fix_version": "0.2.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# decode uri component vulnerable to Denial of Service (DoS)\ndecode uri component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS.\nUpgrade to version 0.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-29167", "package": "npm:hawk", "purl": "pkg:npm/hawk@3.1.3", "package_type": "npm", "package_usage": "N/A", "version": "3.1.3", "fix_version": "9.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in Hawk\nHawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Hawk used a regular expression to parse `Host` HTTP header (`Hawk.utils.parseHost()`), which was subject to regular expression DoS attack   meaning each added character in the attacker's input increases the computation time exponentially. `parseHost()` was patched in `9.0.1` to use built in `URL` class to parse hostname instead.`Hawk.authenticate()` accepts `options` argument. If that contains `host` and `port`, those would be used instead of a call to `utils.parseHost()`.\nUpgrade to version 9.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0144", "package": "npm:shelljs", "purl": "pkg:npm/shelljs@0.7.7", "package_type": "npm", "package_usage": "N/A", "version": "0.7.7", "fix_version": "0.8.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Privilege Management in shelljs\nshelljs is vulnerable to Improper Privilege Management\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "NPM-1088208", "package": "npm:shelljs", "purl": "pkg:npm/shelljs@0.7.7", "package_type": "npm", "package_usage": "N/A", "version": "0.7.7", "fix_version": "0.8.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Privilege Management in shelljs\n### Impact\nOutput from the synchronous version of `shell.exec()` may be visible to other users on the same system. You may be affected if you execute `shell.exec()` in multi user Mac, Linux, or WSL environments, or if you execute `shell.exec()` as the root user.\n\nOther shelljs functions (including the asynchronous version of `shell.exec()`) are not impacted.\n\n### Patches\nPatched in shelljs 0.8.5\n\n### Workarounds\nRecommended action is to upgrade to 0.8.5.\n\n### References\nhttps://huntr.dev/bounties/50996581 c08e 4eed a90e c0bac082679c/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Ask at https://github.com/shelljs/shelljs/issues/1058\n* Open an issue at https://github.com/shelljs/shelljs/issues/new\n\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32803", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "3.2.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7788", "package": "npm:ini", "purl": "pkg:npm/ini@1.3.4", "package_type": "npm", "package_usage": "N/A", "version": "1.3.4", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6.\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__ \npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf 8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\nUpgrade to version 1.3.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37712", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi code point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, ` ` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37701", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "4.4.16", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both ` ` and `/` characters as path separators, however ` ` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing ` ` with `/` on Windows systems, and leaving ` ` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case insensitively.  This _may_ result in undue cache misses on case sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well tested method such as `path.resolve()` before comparing paths to one another.\nUpgrade to version 4.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0437", "package": "pkg:npm/karma@6.4.1", "purl": "pkg:npm/karma@6.4.1", "package_type": "npm", "package_usage": "N/A", "version": "6.4.1", "fix_version": "6.3.14", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "Cross-site Scripting (XSS) - DOM in NPM karma prior to 6.3.14.", "related_urls": ["https://huntr.dev/bounties/64b67ea1-5487-4382-a5f6-e8a95f798885", "https://github.com/karma-runner/karma/commit/839578c45a8ac42fbc1d72105f97eab77dd3eb8a"]}
{"id": "CVE-2022-21704", "package": "pkg:npm/log4js@6.7.0", "purl": "pkg:npm/log4js@6.7.0", "package_type": "npm", "package_usage": "N/A", "version": "6.7.0", "fix_version": "6.4.0", "severity": "MEDIUM", "cvss_score": "5.5", "short_description": "log4js-node is a port of log4js to node.js. In affected versions default file permissions for log files created by the file, fileSync and dateFile appenders are world-readable (in unix). This could cause problems if log files contain sensitive information. This would affect any users that have not supplied their own permissions for the files via the mode parameter in the config. Users are advised to update.", "related_urls": ["https://github.com/log4js-node/log4js-node/blob/v6.4.0/CHANGELOG.md#640", "https://github.com/log4js-node/log4js-node/pull/1141/commits/8042252861a1b65adb66931fdf702ead34fa9b76", "https://github.com/log4js-node/streamroller/pull/87", "https://github.com/log4js-node/log4js-node/security/advisories/GHSA-82v2-mx6x-wq7q", "https://lists.debian.org/debian-lts-announce/2022/12/msg00014.html"]}
{"id": "CVE-2022-24999", "package": "pkg:npm/qs@6.11.0", "purl": "pkg:npm/qs@6.11.0", "package_type": "npm", "package_usage": "N/A", "version": "6.11.0", "fix_version": "6.3.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b&a[__proto__]&a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).", "related_urls": ["https://github.com/n8tz/CVE-2022-24999", "https://github.com/expressjs/express/releases/tag/4.17.3", "https://github.com/ljharb/qs/pull/428"]}
{"id": "CVE-2022-33154", "package": "pkg:npm/istanbuljs/schema@0.1.3", "purl": "pkg:npm/istanbuljs/schema@0.1.3", "package_type": "schema_project", "package_usage": "N/A", "version": "0.1.3", "fix_version": "1.13.1", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "The schema (aka Embedding schema.org vocabulary) extension before 1.13.1 and 2.x before 2.5.1 for TYPO3 allows XSS.", "related_urls": ["https://typo3.org/security/advisory/typo3-ext-sa-2022-012"]}
{"id": "CVE-2022-3517", "package": "pkg:npm/minimatch@3.1.2", "purl": "pkg:npm/minimatch@3.1.2", "package_type": "npm", "package_usage": "N/A", "version": "3.1.2", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.", "related_urls": ["https://github.com/grafana/grafana-image-renderer/issues/329", "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6", "https://lists.debian.org/debian-lts-announce/2023/01/msg00011.html"]}
{"id": "CVE-2021-23343", "package": "pkg:npm/path-parse@1.0.7", "purl": "pkg:npm/path-parse@1.0.7", "package_type": "npm", "package_usage": "N/A", "version": "1.0.7", "fix_version": "1.0.7", "severity": "HIGH", "cvss_score": "7.5", "short_description": "All versions of package path-parse are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst-case time complexity.", "related_urls": ["https://github.com/jbgutierrez/path-parse/issues/8", "https://snyk.io/vuln/SNYK-JS-PATHPARSE-1077067", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1279028", "https://lists.apache.org/thread.html/r6a32cb3eda3b19096ad48ef1e7aa8f26e005f2f63765abb69ce08b85@%3Cdev.myfaces.apache.org%3E"]}
{"id": "CVE-2021-23495", "package": "pkg:npm/karma@6.4.1", "purl": "pkg:npm/karma@6.4.1", "package_type": "npm", "package_usage": "N/A", "version": "6.4.1", "fix_version": "6.3.16", "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "The package karma before 6.3.16 are vulnerable to Open Redirect due to missing validation of the return_url query parameter.", "related_urls": ["https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2412347", "https://snyk.io/vuln/SNYK-JS-KARMA-2396325", "https://github.com/karma-runner/karma/commit/ff7edbb2ffbcdd69761bece86b7dc1ef0740508d"]}
{"id": "CVE-2021-23566", "package": "pkg:npm/nanoid@3.3.4", "purl": "pkg:npm/nanoid@3.3.4", "package_type": "npm", "package_usage": "N/A", "version": "3.3.4", "fix_version": "3.1.31", "severity": "MEDIUM", "cvss_score": "5.5", "short_description": "The package nanoid from 3.0.0 and before 3.1.31 are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.", "related_urls": ["https://github.com/ai/nanoid/pull/328", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2332550", "https://gist.github.com/artalar/bc6d1eb9a3477d15d2772e876169a444", "https://snyk.io/vuln/SNYK-JS-NANOID-2332193", "https://github.com/ai/nanoid/commit/2b7bd9332bc49b6330c7ddb08e5c661833db2575"]}
{"id": "CVE-2021-3807", "package": "pkg:npm/ansi-regex@5.0.1", "purl": "pkg:npm/ansi-regex@5.0.1", "package_type": "npm", "package_usage": "N/A", "version": "5.0.1", "fix_version": "4.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "ansi-regex is vulnerable to Inefficient Regular Expression Complexity", "related_urls": ["https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9", "https://huntr.dev/bounties/5b3cf33b-ede0-4398-9974-800876dfd994", "https://www.oracle.com/security-alerts/cpuapr2022.html", "https://security.netapp.com/advisory/ntap-20221014-0002/"]}
{"id": "CVE-2020-28498", "package": "pkg:npm/elliptic@6.5.4", "purl": "pkg:npm/elliptic@6.5.4", "package_type": "npm", "package_usage": "N/A", "version": "6.5.4", "fix_version": "6.5.4", "severity": "MEDIUM", "cvss_score": "6.8", "short_description": "The package elliptic before 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.", "related_urls": ["https://snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899", "https://github.com/christianlundkvist/blog/blob/master/2020_05_26_secp256k1_twist_attacks/secp256k1_twist_attacks.md", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1069836", "https://github.com/indutny/elliptic/commit/441b7428b0e8f6636c42118ad2aaa186d3c34c3f"]}
{"id": "CVE-2018-1109", "package": "pkg:npm/braces@3.0.2", "purl": "pkg:npm/braces@3.0.2", "package_type": "npm", "package_usage": "N/A", "version": "3.0.2", "fix_version": "2.3.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "A vulnerability was found in Braces versions prior to 2.3.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.", "related_urls": ["https://snyk.io/vuln/npm:braces:20180219", "https://bugzilla.redhat.com/show_bug.cgi?id=1547272"]}
{"id": "CVE-2018-16492", "package": "pkg:npm/extend@3.0.2", "purl": "pkg:npm/extend@3.0.2", "package_type": "npm", "package_usage": "N/A", "version": "3.0.2", "fix_version": "3.0.2", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "A prototype pollution vulnerability was found in module extend <2.0.2, ~<3.0.2 that allows an attacker to inject arbitrary properties onto Object.prototype.", "related_urls": ["https://hackerone.com/reports/381185"]}
