{"id": "CVE-2021-23440", "package": "npm:set-value", "purl": "pkg:npm/set-value@2.0.0", "package_type": "npm", "package_usage": "N/A", "version": "2.0.0", "fix_version": "2.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in set value\nThis affects the package `set value` before 2.0.1, and starting with 3.0.0 but prior to 4.0.1. A type confusion vulnerability can lead to a bypass of CVE 2019 10747 when the user provided keys used in the path parameter are arrays.\nUpgrade to version 2.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0613", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.8", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Authorization Bypass Through User Controlled Key in urijs\nAttacker can use case insensitive protocol schemes like HTTP, htTP, HTtp etc. in order to bypass the patch for CVE 2021 3647.\nUpgrade to version 1.19.8 or later\n            ", "related_urls": []}
{"id": "CVE-2021-44906", "package": "npm:minimist", "purl": "pkg:npm/minimist@0.0.10", "package_type": "npm", "package_usage": "N/A", "version": "0.0.10", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0868", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.10", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Open Redirect in urijs\nurijs prior to version 1.19.10 is vulnerable to open redirect. This is the result of a bypass for the fix to CVE 2022 0613.\nUpgrade to version 1.19.10 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0144", "package": "npm:shelljs", "purl": "pkg:npm/shelljs@0.7.8", "package_type": "npm", "package_usage": "N/A", "version": "0.7.8", "fix_version": "0.8.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Privilege Management in shelljs\nshelljs is vulnerable to Improper Privilege Management\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "NPM-1067451", "package": "npm:shelljs", "purl": "pkg:npm/shelljs@0.7.8", "package_type": "npm", "package_usage": "N/A", "version": "0.7.8", "fix_version": "0.8.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Privilege Management in shelljs\n### Impact\nOutput from the synchronous version of `shell.exec()` may be visible to other users on the same system. You may be affected if you execute `shell.exec()` in multi user Mac, Linux, or WSL environments, or if you execute `shell.exec()` as the root user.\n\nOther shelljs functions (including the asynchronous version of `shell.exec()`) are not impacted.\n\n### Patches\nPatched in shelljs 0.8.5\n\n### Workarounds\nRecommended action is to upgrade to 0.8.5.\n\n### References\nhttps://huntr.dev/bounties/50996581 c08e 4eed a90e c0bac082679c/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Ask at https://github.com/shelljs/shelljs/issues/1058\n* Open an issue at https://github.com/shelljs/shelljs/issues/new\n\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23807", "package": "npm:jsonpointer", "purl": "pkg:npm/jsonpointer@4.0.1", "package_type": "npm", "package_usage": "N/A", "version": "4.0.1", "fix_version": "5.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in node jsonpointer\nThis affects the package `jsonpointer` before `5.0.0`. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\nUpgrade to version 5.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23343", "package": "npm:path-parse", "purl": "pkg:npm/path-parse@1.0.5", "package_type": "npm", "package_usage": "N/A", "version": "1.0.5", "fix_version": "1.0.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in path parse\nAffected versions of npm package `path parse` are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst case time complexity.\nUpgrade to version 1.0.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23383", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.7.7", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in handlebars\nThe package handlebars before 4.7.7 are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.\nUpgrade to version 4.7.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23362", "package": "npm:hosted-git-info", "purl": "pkg:npm/hosted-git-info@2.6.0", "package_type": "npm", "package_usage": "N/A", "version": "2.6.0", "fix_version": "2.8.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in hosted git info\nThe npm package `hosted git info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst case time complexity\nUpgrade to version 2.8.9 or later\n            ", "related_urls": []}
{"id": "NPM-1068514", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.5.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in handlebars\nVersions of `handlebars` prior to 3.0.8 or 4.5.3 are vulnerable to prototype pollution. It is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n\n## Recommendation\n\nUpgrade to version 3.0.8, 4.5.3 or later.\nUpgrade to version 4.5.3 or later\n            ", "related_urls": []}
{"id": "NPM-1068532", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.4.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Denial of Service in handlebars\nAffected versions of `handlebars` are vulnerable to Denial of Service. The package's parser may be forced into an endless loop while processing specially crafted templates. This may allow attackers to exhaust system resources leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 4.4.5 or later.\nUpgrade to version 4.4.5 or later\n            ", "related_urls": []}
{"id": "CVE-2019-20149", "package": "npm:kind-of", "purl": "pkg:npm/kind-of@6.0.2", "package_type": "npm", "package_usage": "N/A", "version": "6.0.2", "fix_version": "6.0.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Validation Bypass in kind of\nVersions of `kind of` 6.x prior to 6.0.3 are vulnerable to a Validation Bypass. A maliciously crafted object can alter the result of the type check, allowing attackers to bypass the type checking validation. \n\n\n## Recommendation\n\nUpgrade to versions 6.0.3 or later.\nUpgrade to version 6.0.3 or later\n            ", "related_urls": []}
{"id": "NPM-1069416", "package": "npm:acorn", "purl": "pkg:npm/acorn@5.5.3", "package_type": "npm", "package_usage": "N/A", "version": "5.5.3", "fix_version": "5.7.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in Acorn\nAffected versions of acorn are vulnerable to Regular Expression Denial of Service.\nA regex in the form of /[x  ud800 /u causes the parser to enter an infinite loop.\nThe string is not valid UTF16 which usually results in it being sanitized before reaching the parser.\nIf an application processes untrusted input and passes it directly to acorn,\nattackers may leverage the vulnerability leading to Denial of Service.\nUpgrade to version 5.7.4 or later\n            ", "related_urls": []}
{"id": "CVE-2019-10744", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.5", "package_type": "npm", "package_usage": "N/A", "version": "4.17.5", "fix_version": "4.17.12", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.12 or later.\nUpgrade to version 4.17.12 or later\n            ", "related_urls": []}
{"id": "CVE-2019-10747", "package": "npm:set-value", "purl": "pkg:npm/set-value@2.0.0", "package_type": "npm", "package_usage": "N/A", "version": "2.0.0", "fix_version": "2.0.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in set value\nVersions of `set value` prior to 3.0.1 or 2.0.1 are vulnerable to Prototype Pollution. The `set` function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.\n\n\n\n\n## Recommendation\n\nIf you are using `set value` 3.x, upgrade to version 3.0.1 or later.\nIf you are using `set value` 2.x, upgrade to version 2.0.1 or later.\nUpgrade to version 2.0.1 or later\n            ", "related_urls": []}
{"id": "NPM-1069548", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.0.14", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in handlebars\nVersions of `handlebars` prior to 4.0.14 are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n\n## Recommendation\n\nFor handlebars 4.1.x upgrade to 4.1.2 or later.\nFor handlebars 4.0.x upgrade to 4.0.14 or later.\nUpgrade to version 4.0.14 or later\n            ", "related_urls": []}
{"id": "NPM-1069598", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.11.0", "package_type": "npm", "package_usage": "N/A", "version": "3.11.0", "fix_version": "3.13.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Denial of Service in js yaml\nVersions of `js yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 3.13.0.\nUpgrade to version 3.13.0 or later\n            ", "related_urls": []}
{"id": "NPM-1069604", "package": "npm:js-yaml", "purl": "pkg:npm/js-yaml@3.11.0", "package_type": "npm", "package_usage": "N/A", "version": "3.11.0", "fix_version": "3.13.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Code Injection in js yaml\nVersions of `js yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example payload is \n`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return Date.now()}' } : 1` \nwhich returns the object \n{\n  \"1553107949161\": 1\n}\n\n\n## Recommendation\n\nUpgrade to version 3.13.1.\nUpgrade to version 3.13.1 or later\n            ", "related_urls": []}
{"id": "CVE-2019-13173", "package": "npm:fstream", "purl": "pkg:npm/fstream@1.0.11", "package_type": "npm", "package_usage": "N/A", "version": "1.0.11", "fix_version": "1.0.12", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in fstream\nVersions of `fstream` prior to 1.0.12 are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file. The `fstream.DirWriter()` function is vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 1.0.12 or later.\nUpgrade to version 1.0.12 or later\n            ", "related_urls": []}
{"id": "CVE-2018-20834", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "2.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in tar\nVersions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.\n\n\n## Recommendation\n\nFor tar 4.x, upgrade to version 4.4.2 or later.\nFor tar 2.x, upgrade to version 2.2.2 or later.\nUpgrade to version 2.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3750", "package": "npm:deep-extend", "purl": "pkg:npm/deep-extend@0.4.2", "package_type": "npm", "package_usage": "N/A", "version": "0.4.2", "fix_version": "0.5.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in deep extend\nVersions of `deep extend` before 0.5.1 are vulnerable to prototype pollution.\n\n\n## Recommendation\n\nUpdate to version 0.5.1 or later.\nUpgrade to version 0.5.1 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1000620", "package": "npm:cryptiles", "purl": "pkg:npm/cryptiles@3.1.2", "package_type": "npm", "package_usage": "N/A", "version": "3.1.2", "fix_version": "4.1.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Insufficient Entropy in cryptiles\nVersions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.\n\n\n## Recommendation\n\nUpgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.\nUpgrade to version 4.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2022-1243", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Incorrect protocol extraction via  r,  n and  t characters\n r,  n and  t characters in user input URLs can potentially lead to incorrect protocol extraction when using npm package urijs prior to version 1.19.11.\n\nThis can lead to XSS when the module is used to prevent passing in malicious javascript: links into HTML or Javascript (see following example):\n````\nconst parse = require('urijs')\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\ninput = \"ja r nvascript:alert(1)\"\nurl = parse(input)\n\nconsole.log(url)\n\napp.get('/', (req, res) => {\n if (url.protocol !== \"javascript:\") {res.send(\"<iframe src= '\" + input + \" '>CLICK ME!</iframe>\")}\n})\n\napp.listen(port, () => {\n console.log(`Example app listening on port ${port}`)\n})\n````\nUpgrade to version 1.19.11 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24723", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Leading white space bypasses protocol validation\n### Impact\nWhitespace characters are not removed from the beginning of the protocol, so URLs are not parsed properly and protocol validation mechanisms may fail.\n\n### Patches\nPatched in 1.19.9\n\n### Workarounds\nRemove leading whitespace from values before passing them to URI.parse (e.g. via `.href(value)` or `new URI(value)`), e.g. by using\n\n```js\nfunction remove_whitespace(url){\n     const whitespace = / [ x00  x20 u00a0 u1680 u2000  u200a u2028 u2029 u202f u205f u3000 ufeff +/;\n     url = url.replace(whitespace, '')\n     return url\n}\n```\n\n### References\n* https://huntr.dev/bounties/82ef23b8 7025 49c9 b5fc 1bb9885788e5/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [medialize/URI.js (https://github.com/medialize/URI.js/)\n\nUpgrade to version 1.19.9 or later\n            ", "related_urls": []}
{"id": "CVE-2019-10795", "package": "npm:undefsafe", "purl": "pkg:npm/undefsafe@2.0.2", "package_type": "npm", "package_usage": "N/A", "version": "2.0.2", "fix_version": "2.0.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in undefsafe\nundefsafe before 2.0.3 is vulnerable to Prototype Pollution. The 'a' function could be tricked into adding or modifying properties of Object.prototype using a `__proto__` payload.\nUpgrade to version 2.0.3 or later\n            ", "related_urls": []}
{"id": "CVE-2019-1010266", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.5", "package_type": "npm", "package_usage": "N/A", "version": "4.17.5", "fix_version": "4.17.11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nlodash prior to 4.7.11 is affected by: CWE 400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.\nUpgrade to version 4.17.11 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8203", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.5", "package_type": "npm", "package_usage": "N/A", "version": "4.17.5", "fix_version": "4.17.20", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires zipping objects based on user provided property arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nUpgrade to version 4.17.20 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7598", "package": "npm:minimist", "purl": "pkg:npm/minimist@0.0.10", "package_type": "npm", "package_usage": "N/A", "version": "0.0.10", "fix_version": "0.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in minimist\nAffected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  __proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `  __proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.\nUpgrade to version 0.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37713", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some path`.  If the drive letter does not match the extraction target, for example `D: extraction dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32804", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE 2021 32803 (https://github.com/npm/node tar/security/advisories/GHSA r628 mhmh qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE 2021 32803 as well if this adjacent issue affects your `node tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2022-29167", "package": "npm:hawk", "purl": "pkg:npm/hawk@6.0.2", "package_type": "npm", "package_usage": "N/A", "version": "6.0.2", "fix_version": "9.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in Hawk\nHawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Hawk used a regular expression to parse `Host` HTTP header (`Hawk.utils.parseHost()`), which was subject to regular expression DoS attack   meaning each added character in the attacker's input increases the computation time exponentially. `parseHost()` was patched in `9.0.1` to use built in `URL` class to parse hostname instead.`Hawk.authenticate()` accepts `options` argument. If that contains `host` and `port`, those would be used instead of a call to `utils.parseHost()`.\nUpgrade to version 9.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-27516", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Hostname spoofing via backslashes in URL\n### Impact\nIf using affected versions to determine a URL's hostname, the hostname can be spoofed by using a backslash (` `) character as part of the scheme delimiter, e.g. `scheme:/ hostname`. If the hostname is used in security decisions, the decision may be incorrect.\n\nDepending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.\n\nExample URL: `https:/ expected example.com/path`\nEscaped string: `https:/  expected example.com/path` (JavaScript strings must escape backslash)\n\nAffected versions incorrectly return no hostname. Patched versions correctly return `expected example.com`. Patched versions match the behavior of other parsers which implement the [WHATWG URL specification (https://url.spec.whatwg.org/), including web browsers and [Node's built in URL class (https://nodejs.org/api/url.html).\n\n### Patches\nVersion 1.19.6 is patched against all known payload variants.\n\n### References\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.6 (fix for this particular bypass)\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.4 (fix for related bypass)\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.3 (fix for related bypass)\n[PR #233 (https://github.com/medialize/URI.js/pull/233) (initial fix for backslash handling)\n\n### For more information\nIf you have any questions or comments about this advisory, open an issue in https://github.com/medialize/URI.js\n\n### Reporter credit\n[Yaniv Nizry (https://twitter.com/ynizry) from the CxSCA AppSec team at Checkmarx\nUpgrade to version 1.19.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32803", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "3.2.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2022-33987", "package": "npm:got", "purl": "pkg:npm/got@6.7.1", "package_type": "npm", "package_usage": "N/A", "version": "6.7.1", "fix_version": "11.8.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Got allows a redirect to a UNIX socket\nThe got package before 11.8.5 and 12.1.0 for Node.js allows a redirect to a UNIX socket.\nUpgrade to version 11.8.5 or later\n            ", "related_urls": []}
{"id": "NPM-1081870", "package": "npm:marked", "purl": "pkg:npm/marked@0.3.17", "package_type": "npm", "package_usage": "N/A", "version": "0.3.17", "fix_version": "0.6.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Marked ReDoS due to email addresses being evaluated in quadratic time\nVersions of `marked` from 0.3.14 until 0.6.2 are vulnerable to Regular Expression Denial of Service. Email addresses may be evaluated in quadratic time, allowing attackers to potentially crash the node process due to resource exhaustion.\n\n\n## Recommendation\n\nUpgrade to version 0.6.2 or later.\nUpgrade to version 0.6.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28469", "package": "npm:glob-parent", "purl": "pkg:npm/glob-parent@3.1.0", "package_type": "npm", "package_usage": "N/A", "version": "3.1.0", "fix_version": "5.1.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# glob parent before 5.1.2 vulnerable to Regular Expression Denial of Service in enclosure regex\nThis affects the package glob parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.\nUpgrade to version 5.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8116", "package": "npm:dot-prop", "purl": "pkg:npm/dot-prop@4.2.0", "package_type": "npm", "package_usage": "N/A", "version": "4.2.0", "fix_version": "4.2.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# dot prop Prototype Pollution vulnerability\nPrototype pollution vulnerability in dot prop npm package versions before 4.2.1 and versions 5.x before 5.1.1 allows an attacker to add arbitrary properties to JavaScript language constructs such as objects.\nUpgrade to version 4.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3647", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Hostname spoofing via backslashes in URL \n### Impact\nIf using affected versions to determine a URL's hostname, the hostname can be spoofed by using a combination of backslash (` `) and slash (`/`) characters as part of the scheme delimiter, e.g. `scheme:/ / / hostname`. If the hostname is used in security decisions, the decision may be incorrect.\n\nDepending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.\n\nExample URL: `https:/ / / expected example.com/path`\nEscaped string: `https:/  /  /  expected example.com/path` (JavaScript strings must escape backslash)\n\nAffected versions incorrectly return no hostname. Patched versions correctly return `expected example.com`. Patched versions match the behavior of other parsers which implement the [WHATWG URL specification (https://url.spec.whatwg.org/), including web browsers and [Node's built in URL class (https://nodejs.org/api/url.html).\n\n### Patches\nVersion 1.19.7 is patched against all known payload variants.\n\n### References\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.7 (fix for this particular bypass)\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.6 (fix for related bypass)\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.4 (fix for related bypass)\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.3 (fix for related bypass)\n[PR #233 (https://github.com/medialize/URI.js/pull/233) (initial fix for backslash handling)\n\n### For more information\nIf you have any questions or comments about this advisory, open an issue in https://github.com/medialize/URI.js\n\n### Reporter credit\n[ready research (https://github.com/ready research) via https://huntr.dev/\nUpgrade to version 1.19.7 or later\n            ", "related_urls": []}
{"id": "CVE-2019-20920", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.5.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary Code Execution in Handlebars\nHandlebars before 3.0.8 and 4.x before 4.5.3 is vulnerable to Arbitrary Code Execution. The lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript. This can be used to run arbitrary code on a server processing Handlebars templates or in a victim's browser (effectively serving as XSS).\nUpgrade to version 4.5.3 or later\n            ", "related_urls": []}
{"id": "CVE-2019-20922", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.4.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in Handlebars\nHandlebars before 4.4.5 allows Regular Expression Denial of Service (ReDoS) because of eager matching. The parser may be forced into an endless loop while processing crafted templates. This may allow attackers to exhaust system resources.\nUpgrade to version 4.4.5 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28499", "package": "npm:merge", "purl": "pkg:npm/merge@1.2.0", "package_type": "npm", "package_usage": "N/A", "version": "1.2.0", "fix_version": "2.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in merge\nAll versions of package merge <2.1.1 are vulnerable to Prototype Pollution via _recursiveMerge .\nUpgrade to version 2.1.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7789", "package": "npm:node-notifier", "purl": "pkg:npm/node-notifier@4.6.1", "package_type": "npm", "package_usage": "N/A", "version": "4.6.1", "fix_version": "8.0.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# OS Command Injection in node notifier\nThis affects the package node notifier before 8.0.1. It allows an attacker to run arbitrary commands on Linux machines due to the options params not being sanitised when being passed an array.\nUpgrade to version 8.0.1 or later\n            ", "related_urls": []}
{"id": "NPM-1082493", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.5.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary Code Execution in handlebars\nVersions of `handlebars` prior to 3.0.8 or 4.5.3 are vulnerable to Arbitrary Code Execution. The package's lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript in the system. It is due to an incomplete fix for a [previous issue (https://www.npmjs.com/advisories/1316). This vulnerability can be used to run arbitrary code in a server processing Handlebars templates or on a victim's browser (effectively serving as Cross Site Scripting).\n\n\n## Recommendation\n\nUpgrade to version 3.0.8, 4.5.3 or later.\nUpgrade to version 4.5.3 or later\n            ", "related_urls": []}
{"id": "NPM-1082499", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.5.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary Code Execution in handlebars\nVersions of `handlebars` prior to 3.0.8 or 4.5.2 are vulnerable to Arbitrary Code Execution. The package's lookup helper fails to properly validate templates, allowing attackers to submit templates that execute arbitrary JavaScript in the system. It can be used to run arbitrary code in a server processing Handlebars templates or on a victim's browser (effectively serving as Cross Site Scripting).\n\nThe following template can be used to demonstrate the vulnerability:  \n```{{#with \"constructor\"}}\n\t{{#with split as |a|}}\n\t\t{{pop (push \"alert('Vulnerable Handlebars JS');\")}}\n\t\t{{#with (concat (lookup join (slice 0 1)))}}\n\t\t\t{{#each (slice 2 3)}}\n\t\t\t\t{{#with (apply 0 a)}}\n\t\t\t\t\t{{.}}\n\t\t\t\t{{/with}}\n\t\t\t{{/each}}\n\t\t{{/with}}\n\t{{/with}}\n{{/with}}```\n\n\n## Recommendation\n\nUpgrade to version 3.0.8, 4.5.2 or later.\nUpgrade to version 4.5.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-21270", "package": "npm:stringstream", "purl": "pkg:npm/stringstream@0.0.5", "package_type": "npm", "package_usage": "N/A", "version": "0.0.5", "fix_version": "0.0.6", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in stringstream\nAll versions of `stringstream` are vulnerable to out of bounds read as it allocates uninitialized Buffers when number is passed in input stream on Node.js 4.x and below.\n\n\n## Recommendation\n\nNo fix is currently available for this vulnerability. It is our recommendation to not install or use this module if user input is being passed in to `stringstream`.\nUpgrade to version 0.0.6 or later\n            ", "related_urls": []}
{"id": "CVE-2019-5413", "package": "npm:morgan", "purl": "pkg:npm/morgan@1.9.0", "package_type": "npm", "package_usage": "N/A", "version": "1.9.0", "fix_version": "1.9.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Code Injection in morgan\nVerisons of `morgan` before 1.9.1 are vulnerable to code injection when user input is allowed into the filter or combined with a prototype pollution attack.\n\n\n## Recommendation\n\nUpdate to version 1.9.1 or later.\nUpgrade to version 1.9.1 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16487", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.5", "package_type": "npm", "package_usage": "N/A", "version": "4.17.5", "fix_version": "4.17.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.11 or later.\nUpgrade to version 4.17.11 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16492", "package": "npm:extend", "purl": "pkg:npm/extend@3.0.1", "package_type": "npm", "package_usage": "N/A", "version": "3.0.1", "fix_version": "3.0.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in extend\nVersions of `extend` prior to 3.0.2 (for 3.x) and 2.0.2 (for 2.x) are vulnerable to Prototype Pollution. The `extend()` function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nIf you're using `extend` 3.x upgrade to 3.0.2 or later.\nIf you're using `extend` 2.x upgrade to 2.0.2 or later.\nUpgrade to version 3.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16469", "package": "npm:merge", "purl": "pkg:npm/merge@1.2.0", "package_type": "npm", "package_usage": "N/A", "version": "1.2.0", "fix_version": "1.2.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in merge\nVersions of `merge` before 1.2.1 are vulnerable to prototype pollution. The `merge.recursive` function can be tricked into adding or modifying properties of the Object prototype.\n\n\n## Recommendation\n\nUpdate to version 1.2.1 or later.\nUpgrade to version 1.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16028", "package": "npm:randomatic", "purl": "pkg:npm/randomatic@1.1.7", "package_type": "npm", "package_usage": "N/A", "version": "1.1.7", "fix_version": "3.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Cryptographically Weak PRNG in randomatic\nAffected versions of `randomatic` generate random values using a cryptographically weak psuedo random number generator. This may result in predictable values instead of random values as intended.\n\n\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.\nUpgrade to version 3.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3745", "package": "npm:atob", "purl": "pkg:npm/atob@2.0.3", "package_type": "npm", "package_usage": "N/A", "version": "2.0.3", "fix_version": "2.1.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in atob\nVersions of `atob` before 2.1.0  uninitialized Buffers when number is passed in input on Node.js 4.x and below.\n\n\n## Recommendation\n\nUpdate to version 2.1.0 or later.\nUpgrade to version 2.1.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-1233", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# URL Confusion When Scheme Not Supplied in medialize/uri.js\nMedialize is a Javascript URL mutation library. When parsing a URL without a scheme and with excessive slashes, like ///www.example.com, URI.js will parse the hostname as null and the path as /www.example.com. Such behaviour is different from that exhibited by browsers, which will parse ///www.example.com as http://www.example.com instead. For example, the following will cause a redirect to http://www.example.com: A fix was released in version 1.19.11.\nUpgrade to version 1.19.11 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23337", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.5", "package_type": "npm", "package_usage": "N/A", "version": "4.17.5", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28500", "package": "npm:lodash", "purl": "pkg:npm/lodash@4.17.5", "package_type": "npm", "package_usage": "N/A", "version": "4.17.5", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" for (var i = 0; i < n; i++) { ret += \" \" } return ret + \"1\"; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now()   time0; console.log(\"time_cost0: \" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now()   time1; console.log(\"time_cost1: \" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now()   time2; console.log(\"time_cost2: \" + time_cost2)\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23369", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.7.7", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Remote code execution in handlebars when compiling templates\nThe package handlebars before 4.7.7 are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\nUpgrade to version 4.7.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21681", "package": "npm:marked", "purl": "pkg:npm/marked@0.3.17", "package_type": "npm", "package_usage": "N/A", "version": "0.3.17", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x : x\n\n  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n  https://marked.js.org/using_advanced#workers\n  https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21680", "package": "npm:marked", "purl": "pkg:npm/marked@0.3.17", "package_type": "npm", "package_usage": "N/A", "version": "0.3.17", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x :${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n  https://marked.js.org/using_advanced#workers\n  https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3807", "package": "npm:ansi-regex", "purl": "pkg:npm/ansi-regex@3.0.0", "package_type": "npm", "package_usage": "N/A", "version": "3.0.0", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in chalk/ansi regex\nansi regex is vulnerable to Inefficient Regular Expression Complexity which could lead to a denial of service.\nUpgrade to version 3.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "purl": "pkg:npm/minimatch@3.0.4", "package_type": "npm", "package_usage": "N/A", "version": "3.0.4", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nUpgrade to version 3.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7608", "package": "npm:yargs-parser", "purl": "pkg:npm/yargs-parser@4.2.1", "package_type": "npm", "package_usage": "N/A", "version": "4.2.1", "fix_version": "5.0.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# yargs parser Vulnerable to Prototype Pollution\nAffected versions of `yargs parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.\nUpgrade to version 5.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-26291", "package": "npm:urijs", "purl": "pkg:npm/urijs@1.19.1", "package_type": "npm", "package_usage": "N/A", "version": "1.19.1", "fix_version": "1.19.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Hostname spoofing via backslashes in URL\n### Impact\nIf using affected versions to determine a URL's hostname, the hostname can be spoofed by using a backslash (` `) character followed by an at (`@`) character. If the hostname is used in security decisions, the decision may be incorrect.\n\nDepending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.\n\nExample URL: `https://expected example.com @observed example.com`\nEscaped string: `https://expected example.com  @observed example.com` (JavaScript strings must escape backslash)\n\nAffected versions incorrectly return `observed example.com`. Patched versions correctly return `expected example.com`. Patched versions match the behavior of other parsers which implement the [WHATWG URL specification (https://url.spec.whatwg.org/), including web browsers and [Node's built in URL class (https://nodejs.org/api/url.html).\n\n### Patches\nVersion 1.19.4 is patched against all known payload variants. Version 1.19.3 has a partial patch but is still vulnerable to a payload variant.\n\n### References\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.4 (complete fix for this bypass)\nhttps://github.com/medialize/URI.js/releases/tag/v1.19.3 (partial fix for this bypass)\n[PR #233 (https://github.com/medialize/URI.js/pull/233) (initial fix for backslash handling)\n\n### For more information\nIf you have any questions or comments about this advisory, open an issue in https://github.com/medialize/URI.js\n\n### Reporter credit\n[Alesandro Ortiz (https://AlesandroOrtiz.com)\nUpgrade to version 1.19.4 or later\n            ", "related_urls": []}
{"id": "CVE-2022-38900", "package": "npm:decode-uri-component", "purl": "pkg:npm/decode-uri-component@0.2.0", "package_type": "npm", "package_usage": "N/A", "version": "0.2.0", "fix_version": "0.2.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# decode uri component vulnerable to Denial of Service (DoS)\ndecode uri component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS.\nUpgrade to version 0.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15366", "package": "npm:ajv", "purl": "pkg:npm/ajv@5.5.2", "package_type": "npm", "package_usage": "N/A", "version": "5.5.2", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\nUpgrade to version 6.12.3 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7774", "package": "npm:y18n", "purl": "pkg:npm/y18n@3.2.1", "package_type": "npm", "package_usage": "N/A", "version": "3.2.1", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in y18n\n### Overview\n\nThe npm package `y18n` before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. \n\n### POC\n\n```\nconst y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n```\n\n### Recommendation\n\nUpgrade to version 3.2.2, 4.0.1, 5.0.5 or later.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7788", "package": "npm:ini", "purl": "pkg:npm/ini@1.3.5", "package_type": "npm", "package_usage": "N/A", "version": "1.3.5", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6.\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__ \npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf 8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\nUpgrade to version 1.3.6 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24999", "package": "npm:qs", "purl": "pkg:npm/qs@6.4.0", "package_type": "npm", "package_usage": "N/A", "version": "6.4.0", "fix_version": "6.4.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# qs vulnerable to Prototype Pollution\nqs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__ =b&a[__proto__ &a[length =100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).\nUpgrade to version 6.4.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "purl": "pkg:npm/json-schema@0.2.3", "package_type": "npm", "package_usage": "N/A", "version": "0.2.3", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37712", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi code point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, ` ` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37701", "package": "npm:tar", "purl": "pkg:npm/tar@2.2.1", "package_type": "npm", "package_usage": "N/A", "version": "2.2.1", "fix_version": "4.4.16", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both ` ` and `/` characters as path separators, however ` ` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing ` ` with `/` on Windows systems, and leaving ` ` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case insensitively.  This _may_ result in undue cache misses on case sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well tested method such as `path.resolve()` before comparing paths to one another.\nUpgrade to version 4.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2022-46175", "package": "npm:json5", "purl": "pkg:npm/json5@0.5.1", "package_type": "npm", "package_usage": "N/A", "version": "0.5.1", "fix_version": "1.0.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in JSON5 via Parse Method\nThe `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) >  1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{ \"foo \":  \"bar \"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n      doSomethingDangerous(props); //  \"Doing dangerous thing as user. \"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{ \"foo \":  \"bar \",  \"isAdmin \": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden\u2026\n    }\n \nHowever, users can instead set the `__proto__` key to `{ \"isAdmin \": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{ \"foo \":  \"bar \",  \"__proto__ \": { \"isAdmin \": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod' )) {\n      doSomethingDangerous(props); //  \"Doing dangerous thing as admin. \"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nUpgrade to version 1.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-20066", "package": "npm:jsdom", "purl": "pkg:npm/jsdom@9.12.0", "package_type": "npm", "package_usage": "N/A", "version": "9.12.0", "fix_version": "16.5.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Insufficient Granularity of Access Control in JSDom\nJSDom improperly allows the loading of local resources, which allows for local files to be manipulated by a malicious web page when script execution is enabled.\nUpgrade to version 16.5.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3777", "package": "npm:tmpl", "purl": "pkg:npm/tmpl@1.0.4", "package_type": "npm", "package_usage": "N/A", "version": "1.0.4", "fix_version": "1.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# tmpl vulnerable to Inefficient Regular Expression Complexity which may lead to resource exhaustion\nnodejs tmpl is simple string formatting. tmpl is vulnerable to Inefficient Regular Expression Complexity which may lead to resource exhaustion.\nUpgrade to version 1.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-29469", "package": "npm:redis", "purl": "pkg:npm/redis@2.8.0", "package_type": "npm", "package_usage": "N/A", "version": "2.8.0", "fix_version": "3.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Node Redis potential exponential regex in monitor mode\n### Impact\nWhen a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service.\n\n### Patches\nThe problem was fixed in commit [`2d11b6d` (https://github.com/NodeRedis/node redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e) and was released in version `3.1.1`.\n\n### References\n#1569 (GHSL 2021 026)\nUpgrade to version 3.1.1 or later\n            ", "related_urls": []}
{"id": "CVE-2019-19919", "package": "npm:handlebars", "purl": "pkg:npm/handlebars@4.0.11", "package_type": "npm", "package_usage": "N/A", "version": "4.0.11", "fix_version": "4.3.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in handlebars\nVersions of `handlebars` prior to 3.0.8 or 4.3.0 are vulnerable to Prototype Pollution leading to Remote Code Execution. Templates may alter an Objects' `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code through crafted payloads.\n\n\n## Recommendation\n\nUpgrade to version 3.0.8, 4.3.0 or later.\nUpgrade to version 4.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2019-10746", "package": "npm:mixin-deep", "purl": "pkg:npm/mixin-deep@1.3.1", "package_type": "npm", "package_usage": "N/A", "version": "1.3.1", "fix_version": "1.3.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in mixin deep\nVersions of `mixin deep` prior to 2.0.1 or 1.3.2 are vulnerable to Prototype Pollution. The `mixinDeep` function fails to validate which Object properties it updates. This allows attackers to modify the prototype of Object, causing the addition or modification of an existing property on all objects.\n\n\n\n\n## Recommendation\n\nIf you are using `mixin deep` 2.x, upgrade to version 2.0.1 or later.\nIf you are using `mixin deep` 1.x, upgrade to version 1.3.2 or later.\nUpgrade to version 1.3.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-43138", "package": "pkg:npm/async@1.0.0", "purl": "pkg:npm/async@1.0.0", "package_type": "async_project", "package_usage": "N/A", "version": "1.0.0", "fix_version": "2.6.4", "severity": "HIGH", "cvss_score": "7.8", "short_description": "In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib/internal/iterator.js createObjectIterator prototype pollution.", "related_urls": ["https://github.com/caolan/async/blob/master/lib/mapValuesLimit.js", "https://jsfiddle.net/oz5twjd9/", "https://github.com/caolan/async/blob/master/lib/internal/iterator.js", "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d", "https://github.com/caolan/async/pull/1828", "https://github.com/caolan/async/blob/v2.6.4/CHANGELOG.md#v264", "https://github.com/caolan/async/compare/v2.6.3...v2.6.4"]}
{"id": "CVE-2018-1109", "package": "pkg:npm/braces@2.3.1", "purl": "pkg:npm/braces@2.3.1", "package_type": "npm", "package_usage": "N/A", "version": "2.3.1", "fix_version": "2.3.1", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "A vulnerability was found in Braces versions prior to 2.3.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.", "related_urls": ["https://snyk.io/vuln/npm:braces:20180219", "https://bugzilla.redhat.com/show_bug.cgi?id=1547272"]}
