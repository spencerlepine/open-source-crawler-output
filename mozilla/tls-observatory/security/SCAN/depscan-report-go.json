{"id": "CVE-2021-33194", "package": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "purl": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "package_type": "golang.org/x", "package_usage": "N/A", "version": "v0.0.0-20201110031124-69a78807bb2b", "fix_version": "0.0.0-20210520170846-37e1c6afe023", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Summary\nAn attacker can craft an input to ParseFragment that causes it to enter an infinite loop and never return.\n\n            ", "related_urls": ["https://go.dev/cl/311090", "https://go.googlesource.com/net/+/37e1c6afe02340126705deced573a85ab75209d7", "https://go.dev/issue/46288", "https://groups.google.com/g/golang-announce/c/wPunbCPkWUg"]}
{"id": "CVE-2021-31525", "package": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "purl": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "package_type": "golang.org/x", "package_usage": "N/A", "version": "v0.0.0-20201110031124-69a78807bb2b", "fix_version": "0.0.0-20210428140749-89ef3d95e781", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Summary\nA malicious HTTP server or client can cause the net/http client or server to panic.\n\nReadRequest and ReadResponse can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client.\n\nThis also affects golang.org/x/net/http2/h2c and HeaderValuesContainsToken in golang.org/x/net/http/httpguts.\n\n            ", "related_urls": ["https://go.dev/cl/313069", "https://go.googlesource.com/net/+/89ef3d95e781148a0951956029c92a211477f7f9", "https://go.dev/issue/45710", "https://groups.google.com/g/golang-announce/c/cu9SP4eSXMc"]}
{"id": "CVE-2021-44716", "package": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "purl": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "package_type": "golang.org/x", "package_usage": "N/A", "version": "v0.0.0-20201110031124-69a78807bb2b", "fix_version": "0.0.0-20211209124913-491a49abca63", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Summary\nAn attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.\n\n            ", "related_urls": ["https://go.dev/cl/369794", "https://go.dev/issue/50058", "https://groups.google.com/g/golang-announce/c/hcmEScgc00k"]}
{"id": "CVE-2020-8911", "package": "pkg:golang/github.com/aws/aws-sdk-go@v1.36.30", "purl": "pkg:golang/github.com/aws/aws-sdk-go@v1.36.30", "package_type": "github.com/aws", "package_usage": "N/A", "version": "v1.36.30", "fix_version": null, "severity": "LOW", "cvss_score": "2.0", "short_description": "# Summary\nThe Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until reencrypted with the new client.\n\n## Related CVE(s)\nCVE-2020-8911, CVE-2020-8912, GHSA-7f33-f4f5-xwgw, GHSA-f5pg-7wfw-84q9\n            \n            ", "related_urls": ["https://aws.amazon.com/blogs/developer/updates-to-the-amazon-s3-encryption-client/?s=09", "https://github.com/aws/aws-sdk-go/pull/3403", "https://github.com/aws/aws-sdk-go/commit/ae9b9fd92af132cfd8d879809d8611825ba135f4"]}
{"id": "CVE-2022-27664", "package": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "purl": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "package_type": "golang.org/x", "package_usage": "N/A", "version": "v0.0.0-20201110031124-69a78807bb2b", "fix_version": "0.0.0-20220906165146-f3363e06e74c", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Summary\nHTTP/2 server connections can hang forever waiting for a clean shutdown that was preempted by a fatal error. This condition can be exploited by a malicious client to cause a denial of service.\n\n            ", "related_urls": ["https://groups.google.com/g/golang-announce/c/x49AQzIVX-s", "https://go.dev/issue/54658", "https://go.dev/cl/428735"]}
{"id": "CVE-2022-41717", "package": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "purl": "pkg:golang/golang.org/x/net@v0.0.0-20201110031124-69a78807bb2b", "package_type": "golang.org/x", "package_usage": "N/A", "version": "v0.0.0-20201110031124-69a78807bb2b", "fix_version": "0.4.0", "severity": "LOW", "cvss_score": "3.7", "short_description": "# Summary\nAn attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n\n            ", "related_urls": ["https://go.dev/issue/56350", "https://go.dev/cl/455717", "https://go.dev/cl/455635", "https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU/m/yZDrXjIiBQAJ"]}
