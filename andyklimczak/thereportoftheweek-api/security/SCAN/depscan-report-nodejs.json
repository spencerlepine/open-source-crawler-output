{"id": "CVE-2021-44906", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<1.2.6", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0144", "package": "npm:shelljs", "package_type": "npm", "package_usage": "optional", "version": "<0.8.5", "fix_version": "0.8.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Privilege Management in shelljs\nshelljs is vulnerable to Improper Privilege Management\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "NPM-1067451", "package": "npm:shelljs", "package_type": "npm", "package_usage": "optional", "version": "<0.8.5", "fix_version": "0.8.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Privilege Management in shelljs\n### Impact\nOutput from the synchronous version of `shell.exec()` may be visible to other users on the same system. You may be affected if you execute `shell.exec()` in multi user Mac, Linux, or WSL environments, or if you execute `shell.exec()` as the root user.\n\nOther shelljs functions (including the asynchronous version of `shell.exec()`) are not impacted.\n\n### Patches\nPatched in shelljs 0.8.5\n\n### Workarounds\nRecommended action is to upgrade to 0.8.5.\n\n### References\nhttps://huntr.dev/bounties/50996581 c08e 4eed a90e c0bac082679c/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Ask at https://github.com/shelljs/shelljs/issues/1058\n* Open an issue at https://github.com/shelljs/shelljs/issues/new\n\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23807", "package": "npm:jsonpointer", "package_type": "npm", "package_usage": "optional", "version": "<5.0.0", "fix_version": "5.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in node jsonpointer\nThis affects the package `jsonpointer` before `5.0.0`. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\nUpgrade to version 5.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23438", "package": "npm:mpath", "package_type": "npm", "package_usage": "optional", "version": "<0.8.4", "fix_version": "0.8.4", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Type confusion in mpath\nThis affects the package mpath before 0.8.4. A type confusion vulnerability can lead to a bypass of CVE 2018 16490. In particular, the condition ignoreProperties.indexOf(parts[i ) !==  1 returns  1 if parts[i  is ['__proto__' . This is because the method that has been called if the input is an array is Array.prototype.indexOf() and not String.prototype.indexOf(). They behave differently depending on the type of the input.\nUpgrade to version 0.8.4 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23343", "package": "npm:path-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.0.7", "fix_version": "1.0.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in path parse\nAffected versions of npm package `path parse` are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst case time complexity.\nUpgrade to version 1.0.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23362", "package": "npm:hosted-git-info", "package_type": "npm", "package_usage": "optional", "version": "<2.8.9", "fix_version": "2.8.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in hosted git info\nThe npm package `hosted git info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst case time complexity\nUpgrade to version 2.8.9 or later\n            ", "related_urls": []}
{"id": "NPM-1068633", "package": "npm:helmet-csp", "package_type": "npm", "package_usage": "optional", "version": ">=1.2.2-<2.9.1", "fix_version": "2.9.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Configuration Override in helmet csp\nVersions of `helmet csp` before to 2.9.1 are vulnerable to a Configuration Override affecting the application's Content Security Policy (CSP). The package's browser sniffing for Firefox deletes the `default src` CSP policy, which is the fallback policy. This allows an attacker to remove an application's default CSP, possibly rendering the application vulnerable to Cross Site Scripting.\n\n\n## Recommendation\n\nUpgrade to version 2.9.1 or later. Setting the `browserSniff` configuration to `false` in vulnerable versions also mitigates the issue.\nUpgrade to version 2.9.1 or later\n            ", "related_urls": []}
{"id": "CVE-2016-2537", "package": "npm:is-my-json-valid", "package_type": "npm", "package_usage": "optional", "version": ">=2.0.0-<2.17.2", "fix_version": "2.17.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in is my json valid\nVersion of `is my json valid` before 1.4.1 or 2.17.2 are vulnerable to regular expression denial of service (ReDoS) via the email validation function.\n\n\n## Recommendation\n\nUpdate to version 1.4.1, 2.17.2 or later.\nUpgrade to version 2.17.2 or later\n            ", "related_urls": []}
{"id": "CVE-2019-10744", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.12", "fix_version": "4.17.12", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.12 are vulnerable to Prototype Pollution.  The function `defaultsDeep` allows a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.12 or later.\nUpgrade to version 4.17.12 or later\n            ", "related_urls": []}
{"id": "NPM-1069589", "package": "npm:braces", "package_type": "npm", "package_usage": "optional", "version": "<2.3.1", "fix_version": "2.3.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in braces\nVersions of `braces` prior to 2.3.1 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 2.3.1 or higher.\nUpgrade to version 2.3.1 or later\n            ", "related_urls": []}
{"id": "NPM-1069598", "package": "npm:js-yaml", "package_type": "npm", "package_usage": "optional", "version": "<3.13.0", "fix_version": "3.13.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Denial of Service in js yaml\nVersions of `js yaml` prior to 3.13.0 are vulnerable to Denial of Service. By parsing a carefully crafted YAML file, the node process stalls and may exhaust system resources leading to a Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 3.13.0.\nUpgrade to version 3.13.0 or later\n            ", "related_urls": []}
{"id": "NPM-1069604", "package": "npm:js-yaml", "package_type": "npm", "package_usage": "optional", "version": "<3.13.1", "fix_version": "3.13.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Code Injection in js yaml\nVersions of `js yaml` prior to 3.13.1 are vulnerable to Code Injection. The `load()` function may execute arbitrary code injected through a malicious YAML file. Objects that have `toString` as key, JavaScript code as value and are used as explicit mapping keys allow attackers to execute the supplied code through the `load()` function. The `safeLoad()` function is unaffected.\n\nAn example payload is \n`{ toString: !<tag:yaml.org,2002:js/function> 'function (){return Date.now()}' } : 1` \nwhich returns the object \n{\n  \"1553107949161\": 1\n}\n\n\n## Recommendation\n\nUpgrade to version 3.13.1.\nUpgrade to version 3.13.1 or later\n            ", "related_urls": []}
{"id": "CVE-2019-13173", "package": "npm:fstream", "package_type": "npm", "package_usage": "optional", "version": "<1.0.12", "fix_version": "1.0.12", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in fstream\nVersions of `fstream` prior to 1.0.12 are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file. The `fstream.DirWriter()` function is vulnerable.\n\n\n## Recommendation\n\nUpgrade to version 1.0.12 or later.\nUpgrade to version 1.0.12 or later\n            ", "related_urls": []}
{"id": "CVE-2018-20834", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<2.2.2", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Overwrite in tar\nVersions of `tar` prior to 4.4.2 for 4.x and 2.2.2 for 2.x are vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink will overwrite the system's file with the contents of the extracted file.\n\n\n## Recommendation\n\nFor tar 4.x, upgrade to version 4.4.2 or later.\nFor tar 2.x, upgrade to version 2.2.2 or later.\nUpgrade to version 2.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-15010", "package": "npm:tough-cookie", "package_type": "npm", "package_usage": "optional", "version": "<2.3.3", "fix_version": "2.3.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in tough cookie\nAffected versions of `tough cookie` are susceptible to a regular expression denial of service.\n\nThe amplification on this vulnerability is relatively low   it takes around 2 seconds for the engine to execute on a malicious input which is 50,000 characters in length.\n\nIf node was compiled using the ` DHTTP_MAX_HEADER_SIZE` however, the impact of the vulnerability can be significant, as the primary limitation for the vulnerability is the default max HTTP header length in node.\n\n\n## Recommendation\n\nUpdate to version 2.3.3 or later.\nUpgrade to version 2.3.3 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3750", "package": "npm:deep-extend", "package_type": "npm", "package_usage": "optional", "version": "<0.5.1", "fix_version": "0.5.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in deep extend\nVersions of `deep extend` before 0.5.1 are vulnerable to prototype pollution.\n\n\n## Recommendation\n\nUpdate to version 0.5.1 or later.\nUpgrade to version 0.5.1 or later\n            ", "related_urls": []}
{"id": "CVE-2018-13863", "package": "npm:bson", "package_type": "npm", "package_usage": "optional", "version": ">=0.5.0-<1.0.5", "fix_version": "1.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# High severity vulnerability that affects bson\nThe MongoDB bson JavaScript module (also known as js bson) versions 0.5.0 to 1.0.x before 1.0.5 is vulnerable to a Regular Expression Denial of Service (ReDoS) in lib/bson/decimal128.js. The flaw is triggered when the Decimal128.fromString() function is called to parse a long untrusted string.\nUpgrade to version 1.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1000620", "package": "npm:cryptiles", "package_type": "npm", "package_usage": "optional", "version": "<4.1.2", "fix_version": "4.1.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Insufficient Entropy in cryptiles\nVersions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.\n\n\n## Recommendation\n\nUpgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.\nUpgrade to version 4.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-18214", "package": "npm:moment", "package_type": "npm", "package_usage": "optional", "version": "<2.19.3", "fix_version": "2.19.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in moment\nAffected versions of `moment` are vulnerable to a low severity regular expression denial of service when parsing dates as strings.\n\n\n## Recommendation\n\nUpdate to version 2.19.3 or later.\nUpgrade to version 2.19.3 or later\n            ", "related_urls": []}
{"id": "CVE-2017-1000427", "package": "npm:marked", "package_type": "npm", "package_usage": "optional", "version": "<0.3.7", "fix_version": "4.0.10", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Moderate severity vulnerability that affects marked\nmarked version 0.3.6 and earlier is vulnerable to an XSS attack in the data: URI parser.\nUpgrade to version 0.3.7 or later\n            ", "related_urls": []}
{"id": "CVE-2015-8855", "package": "npm:semver", "package_type": "npm", "package_usage": "optional", "version": "<4.3.2", "fix_version": "4.3.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in semver\nVersions 4.3.1 and earlier of `semver` are affected by a regular expression denial of service vulnerability when extremely long version strings are parsed.\n\n\n\n## Recommendation\n\nUpdate to version 4.3.2 or later\nUpgrade to version 4.3.2 or later\n            ", "related_urls": []}
{"id": "CVE-2019-1010266", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.11", "fix_version": "4.17.11", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nlodash prior to 4.7.11 is affected by: CWE 400: Uncontrolled Resource Consumption. The impact is: Denial of service. The component is: Date handler. The attack vector is: Attacker provides very long strings, which the library attempts to match using a regular expression. The fixed version is: 4.7.11.\nUpgrade to version 4.17.11 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7774", "package": "npm:y18n", "package_type": "npm", "package_usage": "optional", "version": "<3.2.2", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in y18n\n### Overview\n\nThe npm package `y18n` before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. \n\n### POC\n\n```\nconst y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n```\n\n### Recommendation\n\nUpgrade to version 3.2.2, 4.0.1, 5.0.5 or later.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8203", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.20", "fix_version": "4.17.20", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires zipping objects based on user provided property arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nUpgrade to version 4.17.20 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7598", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<0.2.1", "fix_version": "0.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in minimist\nAffected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  __proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `  __proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.\nUpgrade to version 0.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37713", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some path`.  If the drive letter does not match the extraction target, for example `D: extraction dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37712", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi code point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, ` ` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37701", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.16", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both ` ` and `/` characters as path separators, however ` ` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing ` ` with `/` on Windows systems, and leaving ` ` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case insensitively.  This _may_ result in undue cache misses on case sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well tested method such as `path.resolve()` before comparing paths to one another.\nUpgrade to version 4.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32804", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<3.2.2", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE 2021 32803 (https://github.com/npm/node tar/security/advisories/GHSA r628 mhmh qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE 2021 32803 as well if this adjacent issue affects your `node tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2022-29167", "package": "npm:hawk", "package_type": "npm", "package_usage": "optional", "version": "<9.0.1", "fix_version": "9.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in Hawk\nHawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Hawk used a regular expression to parse `Host` HTTP header (`Hawk.utils.parseHost()`), which was subject to regular expression DoS attack   meaning each added character in the attacker's input increases the computation time exponentially. `parseHost()` was patched in `9.0.1` to use built in `URL` class to parse hostname instead.`Hawk.authenticate()` accepts `options` argument. If that contains `host` and `port`, those would be used instead of a call to `utils.parseHost()`.\nUpgrade to version 9.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-33623", "package": "npm:trim-newlines", "package_type": "npm", "package_usage": "optional", "version": "<3.0.1", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in trim newlines\n@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial of service (ReDoS) for the .end() method.\nUpgrade to version 3.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3803", "package": "npm:nth-check", "package_type": "npm", "package_usage": "optional", "version": "<2.0.1", "fix_version": "2.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in nth check\nnth check is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 2.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8244", "package": "npm:bl", "package_type": "npm", "package_usage": "optional", "version": "<1.2.3", "fix_version": "1.2.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Remote Memory Exposure in bl\nA buffer over read vulnerability exists in bl <4.0.3, <3.0.1, <2.2.1, and <1.2.3 which could allow an attacker to supply user input (even typed) that if it ends up in consume() argument and can become negative, the BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular .slice() calls.\nUpgrade to version 1.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2021-43138", "package": "npm:async", "package_type": "npm", "package_usage": "optional", "version": ">=2.0.0-<2.6.4", "fix_version": "2.6.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in async\nA vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.\nUpgrade to version 2.6.4 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32803", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<3.2.3", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.3 or later\n            ", "related_urls": []}
{"id": "NPM-1080975", "package": "npm:kerberos", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# DLL Injection in kerberos\nVersion of `kerberos` prior to 1.0.0 are vulnerable to DLL Injection. The package loads DLLs without specifying a full path. This may allow attackers to create a file with the same name in a folder that precedes the intended file in the DLL path search. Doing so would allow attackers to execute arbitrary code in the machine.\n\n\n## Recommendation\n\nUpgrade to version 1.0.0 or later.\nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24785", "package": "npm:moment", "package_type": "npm", "package_usage": "optional", "version": "<2.29.2", "fix_version": "2.29.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Path Traversal: 'dir/../../filename' in moment.locale\n### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo (https://github.com/moment/moment)\n\nUpgrade to version 2.29.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28469", "package": "npm:glob-parent", "package_type": "npm", "package_usage": "optional", "version": "<5.1.2", "fix_version": "5.1.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# glob parent before 5.1.2 vulnerable to Regular Expression Denial of Service in enclosure regex\nThis affects the package glob parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.\nUpgrade to version 5.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16042", "package": "npm:growl", "package_type": "npm", "package_usage": "optional", "version": "<1.10.0", "fix_version": "1.10.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Growl before 1.10.0 vulnerable to Command Injection\nAffected versions of `growl` do not properly sanitize input prior to passing it into a shell command, allowing for arbitrary command execution.\n\n\n## Recommendation\n\nUpdate to version 1.10.0 or later.\nUpgrade to version 1.10.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7788", "package": "npm:ini", "package_type": "npm", "package_usage": "optional", "version": "<1.3.6", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__ \npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf 8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\nUpgrade to version 1.3.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "package_type": "npm", "package_usage": "optional", "version": "<0.4.0", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16138", "package": "npm:mime", "package_type": "npm", "package_usage": "optional", "version": "<1.4.1", "fix_version": "1.4.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# mime Regular Expression Denial of Service when mime lookup performed on untrusted user input\nAffected versions of `mime` are vulnerable to regular expression denial of service when a mime lookup is performed on untrusted user input.\n\n\n## Recommendation\n\nUpdate to version 2.0.3 or later.\nUpgrade to version 1.4.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15366", "package": "npm:ajv", "package_type": "npm", "package_usage": "optional", "version": "<6.12.3", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\nUpgrade to version 6.12.3 or later\n            ", "related_urls": []}
{"id": "CVE-2019-2391", "package": "npm:bson", "package_type": "npm", "package_usage": "optional", "version": "<1.1.4", "fix_version": "1.1.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Deserialization of Untrusted Data in bson\nIncorrect parsing of certain JSON input may result in js bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure.\nUpgrade to version 1.1.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7610", "package": "npm:bson", "package_type": "npm", "package_usage": "optional", "version": "<1.1.4", "fix_version": "1.1.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Deserialization of Untrusted Data in bson\nAll versions of bson before 1.1.4 are vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's _bsotype, leading to cases where an object is serialized as a document rather than the intended BSON type.\nUpgrade to version 1.1.4 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1107", "package": "npm:is-my-json-valid", "package_type": "npm", "package_usage": "optional", "version": ">=2.0.0-<2.17.2", "fix_version": "2.17.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular expression deinal of service (ReDoS) in is my json valid\nIt was discovered that the is my json valid JavaScript library used an inefficient regular expression to validate JSON fields defined to have email format. A specially crafted JSON file could cause it to consume an excessive amount of CPU time when validated.\nUpgrade to version 2.17.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1109", "package": "npm:braces", "package_type": "npm", "package_usage": "optional", "version": "<2.3.1", "fix_version": "2.3.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in braces\nA vulnerability was found in Braces versions prior to 2.3.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\nUpgrade to version 2.3.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-35149", "package": "npm:mquery", "package_type": "npm", "package_usage": "optional", "version": "<3.2.3", "fix_version": "3.2.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Code Injection in mquery\nlib/utils.js in mquery before 3.2.3 allows a pollution attack because a special property (e.g., __proto__) can be copied during a merge or clone operation.\nUpgrade to version 3.2.3 or later\n            ", "related_urls": []}
{"id": "NPM-1082509", "package": "npm:mongodb", "package_type": "npm", "package_usage": "optional", "version": "<3.1.13", "fix_version": "3.1.13", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service in mongodb\nVersions of `mongodb` prior to 3.1.13 are vulnerable to Denial of Service. The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.\n\n\n## Recommendation\n\nUpgrade to version 3.1.13 or later.\nUpgrade to version 3.1.13 or later\n            ", "related_urls": []}
{"id": "CVE-2018-21270", "package": "npm:stringstream", "package_type": "npm", "package_usage": "optional", "version": "<0.0.6", "fix_version": "0.0.6", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in stringstream\nAll versions of `stringstream` are vulnerable to out of bounds read as it allocates uninitialized Buffers when number is passed in input stream on Node.js 4.x and below.\n\n\n## Recommendation\n\nNo fix is currently available for this vulnerability. It is our recommendation to not install or use this module if user input is being passed in to `stringstream`.\nUpgrade to version 0.0.6 or later\n            ", "related_urls": []}
{"id": "NPM-1082963", "package": "npm:diff", "package_type": "npm", "package_usage": "optional", "version": "<3.5.0", "fix_version": "3.5.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS)\nA vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\nUpgrade to version 3.5.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16487", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.11", "fix_version": "4.17.11", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `{constructor: {prototype: {...}}}` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.11 or later.\nUpgrade to version 4.17.11 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16490", "package": "npm:mpath", "package_type": "npm", "package_usage": "optional", "version": "<0.5.1", "fix_version": "0.8.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in mpath\nVersions of `mpath` before 0.5.1 are vulnerable to prototype pollution. Provided certain input `mpath` can add or modify properties of the `Object` prototype. These properties will be present on all objects.\n\n\n## Recommendation\n\nUpdate to version `0.5.1` or later.\nUpgrade to version 0.5.1 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16492", "package": "npm:extend", "package_type": "npm", "package_usage": "optional", "version": ">=3.0.0-<3.0.2", "fix_version": "2.0.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in extend\nVersions of `extend` prior to 3.0.2 (for 3.x) and 2.0.2 (for 2.x) are vulnerable to Prototype Pollution. The `extend()` function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nIf you're using `extend` 3.x upgrade to 3.0.2 or later.\nIf you're using `extend` 2.x upgrade to 2.0.2 or later.\nUpgrade to version 3.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16129", "package": "npm:superagent", "package_type": "npm", "package_usage": "optional", "version": "<3.7.0", "fix_version": "3.7.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Large gzip Denial of Service in superagent\nAffected versions of `superagent` do not check the post decompression size of ZIP compressed HTTP responses prior to decompressing. This results in the package being vulnerable to a [ZIP bomb (https://en.wikipedia.org/wiki/Zip_bomb) attack, where an extremely small ZIP file becomes many orders of magnitude larger when decompressed. \n\nThis may result in unrestrained CPU/Memory/Disk consumption, causing a denial of service condition.\n\n\n## Recommendation\n\nUpdate to version 3.7.0 or later.\nUpgrade to version 3.7.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3721", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.5", "fix_version": "4.17.5", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in lodash\nVersions of `lodash` before 4.17.5 are vulnerable to prototype pollution. \n\nThe vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of `Object` via `__proto__` causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nUpdate to version 4.17.5 or later.\nUpgrade to version 4.17.5 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16114", "package": "npm:marked", "package_type": "npm", "package_usage": "optional", "version": "<0.3.9", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in marked\nAffected versions of `marked` are vulnerable to a regular expression denial of service. \n\nThe amplification in this vulnerability is significant, with 1,000 characters resulting in the event loop being blocked for around 6 seconds.\n\n\n## Recommendation\n\nUpdate to version 0.3.9 or later.\nUpgrade to version 0.3.9 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16028", "package": "npm:randomatic", "package_type": "npm", "package_usage": "optional", "version": "<3.0.0", "fix_version": "3.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Cryptographically Weak PRNG in randomatic\nAffected versions of `randomatic` generate random values using a cryptographically weak psuedo random number generator. This may result in predictable values instead of random values as intended.\n\n\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.\nUpgrade to version 3.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3737", "package": "npm:sshpk", "package_type": "npm", "package_usage": "optional", "version": "<1.13.2", "fix_version": "1.13.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in sshpk\nVersions of `sshpk` before 1.13.2 or 1.14.1 are vulnerable to regular expression denial of service when parsing crafted invalid public keys.\n\n\n## Recommendation\n\nUpdate to version 1.13.2, 1.14.1 or later.\nUpgrade to version 1.13.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16137", "package": "npm:debug", "package_type": "npm", "package_usage": "optional", "version": "<2.6.9", "fix_version": "2.6.9", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in debug\nAffected versions of `debug` are vulnerable to regular expression denial of service when untrusted user input is passed into the `o` formatter. \n\nAs it takes 50,000 characters to block the event loop for 2 seconds, this issue is a low severity issue.\n\n\n## Recommendation\n\nVersion 2.x.x: Update to version 2.6.9 or later.\nVersion 3.x.x: Update to version 3.1.0 or later.\nUpgrade to version 2.6.9 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16119", "package": "npm:fresh", "package_type": "npm", "package_usage": "optional", "version": "<0.5.2", "fix_version": "0.5.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in fresh\nAffected versions of `fresh` are vulnerable to regular expression denial of service when parsing specially crafted user input.\n\n\n## Recommendation\n\nUpdate to version 0.5.2 or later.\nUpgrade to version 0.5.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16118", "package": "npm:forwarded", "package_type": "npm", "package_usage": "optional", "version": "<0.1.2", "fix_version": "0.1.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in forwarded\nAffected versions of `forwarded` are vulnerable to regular expression denial of service when parsing specially crafted user input.\n\n\n## Recommendation\n\nUpdate to version 0.1.2 or later\nUpgrade to version 0.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3728", "package": "npm:hoek", "package_type": "npm", "package_usage": "optional", "version": "<4.2.1", "fix_version": "4.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in hoek\nVersions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.\n\n\n## Recommendation\n\nUpdate to version 4.2.1, 5.0.3 or later.\nUpgrade to version 4.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23337", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28500", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" for (var i = 0; i < n; i++) { ret += \" \" } return ret + \"1\"; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now()   time0; console.log(\"time_cost0: \" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now()   time1; console.log(\"time_cost1: \" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now()   time2; console.log(\"time_cost2: \" + time_cost2)\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23358", "package": "npm:underscore", "package_type": "npm", "package_usage": "optional", "version": ">=1.3.2-<1.12.1", "fix_version": "1.12.1", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Arbitrary Code Execution in underscore\nThe package `underscore` from 1.13.0 0 and before 1.13.0 2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized.\nUpgrade to version 1.12.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21222", "package": "npm:css-what", "package_type": "npm", "package_usage": "optional", "version": "<2.1.3", "fix_version": "2.1.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# css what vulnerable to ReDoS due to use of insecure regular expression\nThe package css what before 2.1.3 is vulnerable to Regular Expression Denial of Service (ReDoS) due to the use of insecure regular expression in the `re_attr` variable of index.js. The exploitation of this vulnerability could be triggered via the parse function.\nUpgrade to version 2.1.3 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21681", "package": "npm:marked", "package_type": "npm", "package_usage": "optional", "version": "<4.0.10", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x : x\n\n  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (  [   (`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n  https://marked.js.org/using_advanced#workers\n  https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21680", "package": "npm:marked", "package_type": "npm", "package_usage": "optional", "version": "<4.0.10", "fix_version": "4.0.10", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in marked\n### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x :${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker (https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n  https://marked.js.org/using_advanced#workers\n  https://owasp.org/www community/attacks/Regular_expression_Denial_of_Service_ _ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked (https://github.com/markedjs/marked)\n\nUpgrade to version 4.0.10 or later\n            ", "related_urls": []}
{"id": "CVE-2019-17426", "package": "npm:mongoose", "package_type": "npm", "package_usage": "required", "version": "<4.13.21", "fix_version": "4.13.21", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Improper Input Validation in Automattic Mongoose\nAutomattic Mongoose through 5.7.4 allows attackers to bypass access control (in some applications) because any query object with a _bsontype attribute is ignored. For example, adding \"_bsontype\":\"a\" can sometimes interfere with a query filter. NOTE: this CVE is about Mongoose's failure to work around this _bsontype special case that exists in older versions of the bson parser (aka the mongodb/js bson project).\nUpgrade to version 4.13.21 or later\n            ", "related_urls": []}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "package_type": "npm", "package_usage": "optional", "version": "<3.0.5", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nUpgrade to version 3.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7608", "package": "npm:yargs-parser", "package_type": "npm", "package_usage": "optional", "version": "<=5.0.0", "fix_version": "5.0.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# yargs parser Vulnerable to Prototype Pollution\nAffected versions of `yargs parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.\nUpgrade to version 5.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-13110", "package": "npm:kerberos", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "HIGH", "cvss_score": "7.8", "short_description": "The kerberos package before 1.0.0 for Node.js allows arbitrary code execution and privilege escalation via injection of malicious DLLs through use of the kerberos_sspi LoadLibrary() method, because of a DLL path search.", "related_urls": ["https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd", "https://www.op-c.net/2020/05/15/dll-injection-attack-in-kerberos-npm-package/", "https://www.npmjs.com/advisories/1514", "https://www.linkedin.com/posts/op-innovate_dll-injection-attack-in-kerberos-npm-package-activity-6667043749547253760-kVlW"]}
