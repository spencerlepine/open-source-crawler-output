{"id": "CVE-2021-44906", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<1.2.6", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0536", "package": "npm:follow-redirects", "package_type": "npm", "package_usage": "optional", "version": "<1.14.8", "fix_version": "1.14.8", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Exposure of Sensitive Information to an Unauthorized Actor in follow redirects\nExposure of Sensitive Information to an Unauthorized Actor in NPM follow redirects prior to 1.14.8.\nUpgrade to version 1.14.8 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0122", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Open Redirect in node forge\nparseUrl functionality in node forge mishandles certain uses of backslash such as https:/ / /  and interprets the URI as a relative path. \nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "NPM-1067471", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in node forge debug API.\n### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.  It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n  https://www.huntr.dev/bounties/1 npm node forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.\nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23807", "package": "npm:jsonpointer", "package_type": "npm", "package_usage": "optional", "version": "<5.0.0", "fix_version": "5.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in node jsonpointer\nThis affects the package `jsonpointer` before `5.0.0`. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\nUpgrade to version 5.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24773", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.3.0", "fix_version": "1.3.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Verification of Cryptographic Signature in `node forge`\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at [example email address (mailto:security@digitalbazaar.com)\nUpgrade to version 1.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24772", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.3.0", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\" (https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at [example email address (mailto:security@digitalbazaar.com)\nUpgrade to version 1.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24771", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.3.0", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\" (https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at [example email address (mailto:security@digitalbazaar.com)\nUpgrade to version 1.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-43138", "package": "npm:async", "package_type": "npm", "package_usage": "optional", "version": ">=2.0.0-<2.6.4", "fix_version": "2.6.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in async\nA vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.\nUpgrade to version 2.6.4 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24434", "package": "npm:dicer", "package_type": "npm", "package_usage": "optional", "version": "<=0.3.1", "fix_version": null, "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Crash in HeaderParser in dicer\nThis affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. A complete denial of service can be achived by sending the malicious form in a loop.\nNone\n            ", "related_urls": []}
{"id": "CVE-2021-23566", "package": "npm:nanoid", "package_type": "npm", "package_usage": "optional", "version": ">=3.0.0-<3.1.31", "fix_version": "3.1.31", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Exposure of Sensitive Information to an Unauthorized Actor in nanoid\nThe package nanoid from 3.0.0, before 3.1.31, are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.\nUpgrade to version 3.1.31 or later\n            ", "related_urls": []}
{"id": "CVE-2022-25858", "package": "npm:terser", "package_type": "npm", "package_usage": "optional", "version": "<4.8.1", "fix_version": "4.8.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Terser insecure use of regular expressions before v4.8.1 and v5.14.2 leads to ReDoS\nThe package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.\nUpgrade to version 4.8.1 or later\n            ", "related_urls": []}
{"id": "NPM-1081840", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# URL parsing in node forge could lead to undesired behavior.\n### Impact\nThe regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.\n\n### Patches\n`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.\n\n### Workarounds\nEnsure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.\n\n### References\n  https://www.huntr.dev/bounties/41852c50 3c6d 4703 8c55 4db27164a4ae/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at support@digitalbazaar.com\n\nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "package_type": "npm", "package_usage": "optional", "version": "<0.4.0", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-25878", "package": "npm:protobufjs", "package_type": "npm", "package_usage": "optional", "version": ">=6.11.0-<6.11.3", "fix_version": "6.11.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in protobufjs\nThe package protobufjs is vulnerable to Prototype Pollution, which can allow an attacker to add/modify properties of the Object.prototype. Versions after and including 6.10.0 until 6.10.3 and after and including 6.11.0 until 6.11.3 are vulnerable.\n\nThis vulnerability can occur in multiple ways:\n1. by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions\n2. by parsing/loading .proto files\n\n\n\nUpgrade to version 6.11.3 or later\n            ", "related_urls": []}
{"id": "CVE-2022-29078", "package": "npm:ejs", "package_type": "npm", "package_usage": "optional", "version": "<3.1.7", "fix_version": "3.1.7", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# ejs template injection vulnerability\nThe ejs (aka Embedded JavaScript templates) package 3.1.6 for Node.js allows server side template injection in settings[view options [outputFunctionName . This is parsed as an internal option, and overwrites the outputFunctionName option with an arbitrary OS command (which is executed upon template compilation).\nUpgrade to version 3.1.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-36083", "package": "npm:jose", "package_type": "npm", "package_usage": "optional", "version": ">=2.0-<=2.0.5", "fix_version": "3.20.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# JOSE vulnerable to resource exhaustion via specifically crafted JWE\nThe PBKDF2 based JWE key management algorithms expect a JOSE Header Parameter named `p2c` ([PBES2 Count (https://www.rfc editor.org/rfc/rfc7518.html#section 4.8.1.2)), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute force and dictionary attacks more expensive.\n\nThis makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU bound computation that may take an unreasonable amount of time to finish.\n\n### Impact\n\nUnder certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.\n\n### Affected users\n\nThe impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (`alg` Header Parameter) using the `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or through other means.\n\nThe PBKDF2 based JWE Key Management Algorithm Identifiers are\n\n  `PBES2 HS256+A128KW`\n  `PBES2 HS384+A192KW`\n  `PBES2 HS512+A256KW`\n\ne.g.\n\n```js\nconst secret = new Uint8Array(16)\nconst jwe = '...' // JWE from an untrusted party\n\nawait jose.compactDecrypt(jwe, secret)\n```\n\nYou are NOT affected if any of the following applies to you\n\n  Your code does not use the JWE APIs\n  Your code only produces JWE tokens\n  Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)\n  Your code only accepts JWEs produced by trusted sources\n  Your code limits the accepted JWE Key Management Algorithms using the `keyManagementAlgorithms` decryption option not including any of the PBKDF2 based JWE key management algorithms\n\n### Patches\n\n`v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2` releases limit the maximum PBKDF2 iteration count to `10000` by default. It is possible to adjust this limit with a newly introduced `maxPBES2Count` decryption option.\n\n### Workarounds\n\nAll users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to `10000` by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.\n\nIf users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2 based JWE key management algorithms.\n\n  they can use the `keyManagementAlgorithms` decryption option to disable accepting PBKDF2 altogether\n  they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (`p2c` Header Parameter)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an discussion in the project's [repository (https://github.com/panva/jose/discussions/new?category=q a&title=GHSA jv3g j58f 9mq9%20advisory%20question)\n* Email me at [panva.ip@gmail.com (mailto:panva.ip@gmail.com)\n\nUpgrade to version 2.0.6 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0235", "package": "npm:node-fetch", "package_type": "npm", "package_usage": "optional", "version": "<2.6.7", "fix_version": "2.6.7", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# node fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor\nnode fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor\nUpgrade to version 2.6.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0155", "package": "npm:follow-redirects", "package_type": "npm", "package_usage": "optional", "version": "<1.14.7", "fix_version": "1.14.8", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Exposure of sensitive information in follow redirects\nfollow redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor\nUpgrade to version 1.14.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-33154", "package": "istanbuljs:schema", "package_type": "schema_project", "package_usage": "optional", "version": "<1.13.1", "fix_version": "1.13.1", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "The schema (aka Embedding schema.org vocabulary) extension before 1.13.1 and 2.x before 2.5.1 for TYPO3 allows XSS.", "related_urls": ["https://typo3.org/security/advisory/typo3-ext-sa-2022-012"]}
{"id": "CVE-2021-20291", "package": "firebase:storage", "package_type": "storage_project", "package_usage": "optional", "version": "<1.28.1", "fix_version": "1.28.1", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "A deadlock vulnerability was found in 'github.com/containers/storage' in versions before 1.28.1. When a container image is processed, each layer is unpacked using `tar`. If one of those layers is not a valid `tar` archive this causes an error leading to an unexpected situation where the code indefinitely waits for the tar unpacked stream, which never finishes. An attacker could use this vulnerability to craft a malicious image, which when downloaded and stored by an application using containers/storage, would then cause a deadlock leading to a Denial of Service (DoS).", "related_urls": ["https://bugzilla.redhat.com/show_bug.cgi?id=1939485", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/R5D7XL7FL24TWFMGQ3K2S72EOUSLZMKL/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZNMB7O2UIXE34PGSCSOULGHPX5LIJBMM/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WX24EITRXVHDM5M223BVTJA2ODF2FSHI/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SPYOHNG2Q7DCAQZMGYLMENLKALGDLG3X/", "https://unit42.paloaltonetworks.com/cve-2021-20291/"]}
{"id": "CVE-2021-29444", "package": "npm:jose", "package_type": "npm", "package_usage": "optional", "version": "<3.11.4", "fix_version": "3.20.4", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "jose-browser-runtime is an npm package which provides a number of cryptographic functions. In versions prior to 3.11.4 the AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). A patch was released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `>=3.11.4`. Users should upgrade to `^3.11.4`.", "related_urls": ["https://github.com/panva/jose/security/advisories/GHSA-94hh-pjjg-rwmr", "https://www.npmjs.com/package/jose-browser-runtime"]}
{"id": "CVE-2021-29445", "package": "npm:jose", "package_type": "npm", "package_usage": "optional", "version": "<3.11.4", "fix_version": "3.20.4", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "jose-node-esm-runtime is an npm package which provides a number of cryptographic functions. In versions prior to 3.11.4 the AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). A patch was released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `>=3.11.4`. Users should upgrade to `^3.11.4`.", "related_urls": ["https://www.npmjs.com/package/jose-node-esm-runtime", "https://github.com/panva/jose/security/advisories/GHSA-4v4g-726h-xvfv"]}
{"id": "CVE-2021-29446", "package": "npm:jose", "package_type": "npm", "package_usage": "optional", "version": "<3.11.4", "fix_version": "3.20.4", "severity": "MEDIUM", "cvss_score": "5.9", "short_description": "jose-node-cjs-runtime is an npm package which provides a number of cryptographic functions. In versions prior to 3.11.4 the AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). A patch was released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `>=3.11.4`. Users should upgrade to `^3.11.4`.", "related_urls": ["https://www.npmjs.com/package/jose-node-cjs-runtime", "https://github.com/panva/jose/security/advisories/GHSA-rvcw-f68w-8h8h"]}
{"id": "CVE-2020-15168", "package": "npm:node-fetch", "package_type": "npm", "package_usage": "optional", "version": "<2.6.1", "fix_version": "2.6.7", "severity": "MEDIUM", "cvss_score": "5.3", "short_description": "node-fetch before versions 2.6.1 and 3.0.0-beta.9 did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure. For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.", "related_urls": ["https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r", "https://www.npmjs.com/package/node-fetch"]}
