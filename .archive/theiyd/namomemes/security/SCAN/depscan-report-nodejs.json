{"id": "CVE-2021-44906", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<1.2.6", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3765", "package": "npm:validator", "package_type": "npm", "package_usage": "optional", "version": "<13.7.0", "fix_version": "13.7.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Inefficient Regular Expression Complexity in validator.js\nvalidator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 13.7.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23438", "package": "npm:mpath", "package_type": "npm", "package_usage": "optional", "version": "<0.8.4", "fix_version": "0.8.4", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Type confusion in mpath\nThis affects the package mpath before 0.8.4. A type confusion vulnerability can lead to a bypass of CVE 2018 16490. In particular, the condition ignoreProperties.indexOf(parts[i ) !==  1 returns  1 if parts[i  is ['__proto__' . This is because the method that has been called if the input is an array is Array.prototype.indexOf() and not String.prototype.indexOf(). They behave differently depending on the type of the input.\nUpgrade to version 0.8.4 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23343", "package": "npm:path-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.0.7", "fix_version": "1.0.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in path parse\nAffected versions of npm package `path parse` are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst case time complexity.\nUpgrade to version 1.0.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23362", "package": "npm:hosted-git-info", "package_type": "npm", "package_usage": "optional", "version": "<2.8.9", "fix_version": "2.8.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in hosted git info\nThe npm package `hosted git info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst case time complexity\nUpgrade to version 2.8.9 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8203", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.20", "fix_version": "4.17.20", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires zipping objects based on user provided property arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nUpgrade to version 4.17.20 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7598", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<0.2.1", "fix_version": "0.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in minimist\nAffected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  __proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `  __proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.\nUpgrade to version 0.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21718", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<13.6.6", "fix_version": "13.6.6", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Renderers can obtain access to random bluetooth device without permission in Electron\n### Impact\nThis vulnerability allows renderers to obtain access to a random bluetooth device via the [web bluetooth API (https://developer.mozilla.org/en US/docs/Web/API/Web_Bluetooth_API) if the app has not configured a custom `select bluetooth device` event handler.  The device that is accessed is random and the attacker would have no way of selecting a specific device.\n\nAll current stable versions of Electron are affected.\n\n### Patches\nThis has been patched and the following Electron versions contain the fix:\n* `17.0.0 alpha.6`\n* `16.0.6`\n* `15.3.5`\n* `14.2.4`\n* `13.6.6`\n\n### Workarounds\nAdding this code to your app can workaround the issue.\n\n```js\napp.on('web contents created', (event, webContents) => {\n  webContents.on('select bluetooth device', (event, devices, callback) => {\n    // Prevent default behavior\n    event.preventDefault();\n    // Cancel the request\n    callback('');\n  });\n});\n```\n\nFor more information\nIf you have any questions or comments about this advisory, email us at security@electronjs.org.\nUpgrade to version 13.6.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-33623", "package": "npm:trim-newlines", "package_type": "npm", "package_usage": "optional", "version": "<3.0.1", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in trim newlines\n@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial of service (ReDoS) for the .end() method.\nUpgrade to version 3.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3803", "package": "npm:nth-check", "package_type": "npm", "package_usage": "optional", "version": "<2.0.1", "fix_version": "2.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in nth check\nnth check is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 2.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-29247", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<15.5.5", "fix_version": "15.5.5", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Compromised child renderer processes could obtain IPC access without nodeIntegrationInSubFrames being enabled\n### Impact\nThis vulnerability allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`.\n\nPlease note the misleadingly named `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access rather it depends on the existing `sandbox` setting.  If your application is sandboxed then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs (which includes `ipcRenderer`).\n\nIf your application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled.\n\n### Patches\nThis has been patched and the following Electron versions contain the fix:\n\n* `18.0.0 beta.6`\n* `17.2.0`\n* `16.2.6`\n* `15.5.5`\n\n### Workarounds\nEnsure that all IPC message handlers appropriately validate `senderFrame` as per our [security tutorial here (https://github.com/electron/electron/blob/main/docs/tutorial/security.md#17 validate the sender of all ipc messages).\n\n### For more information\n\nIf you have any questions or comments about this advisory, email us at [security@electronjs.org (mailto:security@electronjs.org).\nUpgrade to version 15.5.5 or later\n            ", "related_urls": []}
{"id": "CVE-2022-29257", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<15.5.0", "fix_version": "15.5.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# AutoUpdater module fails to validate certain nested components of the bundle\n### Impact\nThis vulnerability allows attackers who have control over a given apps update server / update storage to serve maliciously crafted update packages that pass the code signing validation check but contain malicious code in some components.\n\nPlease note that this kind of attack would require **significant** privileges in your own auto updating infrastructure and the ease of that attack entirely depends on your infrastructure security.\n\n### Patches\nThis has been patched and the following Electron versions contain the fix:\n\n* `18.0.0 beta.6`\n* `17.2.0`\n* `16.2.0`\n* `15.5.0`\n\n### Workarounds\nThere are no workarounds for this issue, please update to a patched version of Electron.\n\n### For more information\nIf you have any questions or comments about this advisory, email us at [security@electronjs.org (mailto:security@electronjs.org)\nUpgrade to version 15.5.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7788", "package": "npm:ini", "package_type": "npm", "package_usage": "optional", "version": "<1.3.6", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ini before 1.3.6 vulnerable to Prototype Pollution via ini.parse\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__ \npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf 8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\nUpgrade to version 1.3.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "package_type": "npm", "package_usage": "optional", "version": "<0.4.0", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-39184", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<11.5.0", "fix_version": "11.5.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Electron's sandboxed renderers can obtain thumbnails of arbitrary files through the nativeImage API\n### Impact\nThis vulnerability allows a sandboxed renderer to request a \"thumbnail\" image of an arbitrary file on the user's system. The thumbnail can potentially include significant parts of the original file, including textual data in many cases.\n\nAll current stable versions of Electron are affected.\n\n### Patches\nThis was fixed with #30728, and the following Electron versions contain the fix:\n\n  15.0.0 alpha.10\n  14.0.0\n  13.3.0\n  12.1.0\n  11.5.0\n\n### Workarounds\nIf your app enables `contextIsolation`, this vulnerability is significantly more difficult for an attacker to exploit.\n\nFurther, if your app does not depend on the `createThumbnailFromPath` API, then you can simply disable the functionality. In the main process, before the 'ready' event:\n```js\ndelete require('electron').nativeImage.createThumbnailFromPath\n```\n\n### For more information\nIf you have any questions or comments about this advisory, email us at [security@electronjs.org (mailto:security@electronjs.org).\nUpgrade to version 11.5.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23400", "package": "npm:nodemailer", "package_type": "npm", "package_usage": "optional", "version": "<6.6.1", "fix_version": "6.6.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Header injection in nodemailer\nThe package nodemailer before 6.6.1 are vulnerable to HTTP Header Injection if unsanitized user input that may contain newlines and carriage returns is passed into an address object.\nUpgrade to version 6.6.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15366", "package": "npm:ajv", "package_type": "npm", "package_usage": "optional", "version": "<6.12.3", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\nUpgrade to version 6.12.3 or later\n            ", "related_urls": []}
{"id": "CVE-2019-2391", "package": "npm:bson", "package_type": "npm", "package_usage": "optional", "version": "<1.1.4", "fix_version": "1.1.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Deserialization of Untrusted Data in bson\nIncorrect parsing of certain JSON input may result in js bson not correctly serializing BSON. This may cause unexpected application behaviour including data disclosure.\nUpgrade to version 1.1.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7610", "package": "npm:bson", "package_type": "npm", "package_usage": "optional", "version": "<1.1.4", "fix_version": "1.1.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Deserialization of Untrusted Data in bson\nAll versions of bson before 1.1.4 are vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's _bsotype, leading to cases where an object is serialized as a document rather than the intended BSON type.\nUpgrade to version 1.1.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7769", "package": "npm:nodemailer", "package_type": "npm", "package_usage": "optional", "version": "<6.4.16", "fix_version": "6.4.16", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Command injection in nodemailer\nThis affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.\nUpgrade to version 6.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2020-26272", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<9.4.0", "fix_version": "9.4.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# IPC messages delivered to the wrong frame in Electron\n### Impact\nIPC messages sent from the main process to a subframe in the renderer process, through `webContents.sendToFrame`, `event.reply` or when using the `remote` module, can in some cases be delivered to the wrong frame.\n\nIf your app does ANY of the following, then it is impacted by this issue:\n  Uses `remote`\n  Calls `webContents.sendToFrame`\n  Calls `event.reply` in an IPC message handler\n\n### Patches\nThis has been fixed in the following versions:\n\n  9.4.0\n  10.2.0\n  11.1.0\n  12.0.0 beta.9\n\n### Workarounds\nThere are no workarounds for this issue.\n\n### For more information\nIf you have any questions or comments about this advisory, email us at [security@electronjs.org (mailto:security@electronjs.org).\nUpgrade to version 9.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-35149", "package": "npm:mquery", "package_type": "npm", "package_usage": "optional", "version": "<3.2.3", "fix_version": "3.2.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Code Injection in mquery\nlib/utils.js in mquery before 3.2.3 allows a pollution attack because a special property (e.g., __proto__) can be copied during a merge or clone operation.\nUpgrade to version 3.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2020-4076", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<7.2.4", "fix_version": "7.2.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Context isolation bypass via leaked cross context objects in Electron\n### Impact\nApps using `contextIsolation` are affected.\n\nThis is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.\n\n### Workarounds\nThere are no app side workarounds, you must update your Electron version to be protected.\n\n### Fixed Versions\n* `9.0.0 beta.21`\n* `8.2.4`\n* `7.2.4`\n\n### Non Impacted Versions\n* `9.0.0 beta.*`\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@electronjs.org (mailto:security@electronjs.org)\nUpgrade to version 7.2.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-4077", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<7.2.4", "fix_version": "7.2.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Context isolation bypass via contextBridge in Electron\n### Impact\nApps using both `contextIsolation` and `contextBridge` are affected.\n\nThis is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.\n\n### Workarounds\nThere are no app side workarounds, you must update your Electron version to be protected.\n\n### Fixed Versions\n* `9.0.0 beta.21`\n* `8.2.4`\n* `7.2.4`\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@electronjs.org (mailto:security@electronjs.org)\nUpgrade to version 7.2.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-4075", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<7.2.4", "fix_version": "7.2.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Arbitrary file read via window open IPC in Electron\n### Impact\nThe vulnerability allows arbitrary local file read by defining unsafe window options on a child window opened via window.open.\n\n### Workarounds\nEnsure you are calling `event.preventDefault()` on all [`new window` (https://electronjs.org/docs/api/web contents#event new window) events where the `url` or `options` is not something you expect.\n\n### Fixed Versions\n* `9.0.0 beta.21`\n* `8.2.4`\n* `7.2.4`\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@electronjs.org (mailto:security@electronjs.org)\nUpgrade to version 7.2.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15096", "package": "npm:electron", "package_type": "npm", "package_usage": "optional", "version": "<6.1.11", "fix_version": "6.1.11", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Context isolation bypass via Promise in Electron\n### Impact\nApps using `contextIsolation` are affected.\n\nThis is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.\n\n### Workarounds\nThere are no app side workarounds, you must update your Electron version to be protected.\n\n### Fixed Versions\n* `9.0.0 beta.21`\n* `8.2.4`\n* `7.2.4`\n* `6.1.11`\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@electronjs.org (mailto:security@electronjs.org)\nUpgrade to version 6.1.11 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23337", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28500", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" for (var i = 0; i < n; i++) { ret += \" \" } return ret + \"1\"; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now()   time0; console.log(\"time_cost0: \" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now()   time1; console.log(\"time_cost1: \" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now()   time2; console.log(\"time_cost2: \" + time_cost2)\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21222", "package": "npm:css-what", "package_type": "npm", "package_usage": "optional", "version": "<2.1.3", "fix_version": "2.1.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# css what vulnerable to ReDoS due to use of insecure regular expression\nThe package css what before 2.1.3 is vulnerable to Regular Expression Denial of Service (ReDoS) due to the use of insecure regular expression in the `re_attr` variable of index.js. The exploitation of this vulnerability could be triggered via the parse function.\nUpgrade to version 2.1.3 or later\n            ", "related_urls": []}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "package_type": "npm", "package_usage": "optional", "version": "<3.0.5", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nUpgrade to version 3.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-25944", "package": "npm:deep-defaults", "package_type": "npm", "package_usage": "optional", "version": ">=1.0.0-<=1.0.5", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "Prototype pollution vulnerability in 'deep-defaults' versions 1.0.0 through 1.0.5 allows attacker to cause a denial of service and may lead to remote code execution.", "related_urls": ["https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25944"]}
