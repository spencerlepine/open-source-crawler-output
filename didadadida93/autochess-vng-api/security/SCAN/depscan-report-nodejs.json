{"id": "CVE-2021-44906", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<1.2.6", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3765", "package": "npm:validator", "package_type": "npm", "package_usage": "optional", "version": "<13.7.0", "fix_version": "13.7.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Inefficient Regular Expression Complexity in validator.js\nvalidator.js prior to 13.7.0 is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 13.7.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23343", "package": "npm:path-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.0.7", "fix_version": "1.0.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in path parse\nAffected versions of npm package `path parse` are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst case time complexity.\nUpgrade to version 1.0.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-33502", "package": "npm:normalize-url", "package_type": "npm", "package_usage": "optional", "version": ">=4.3.0-<4.5.1", "fix_version": "4.5.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ReDoS in normalize url\nThe normalize url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.\nUpgrade to version 4.5.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23383", "package": "npm:handlebars", "package_type": "npm", "package_usage": "optional", "version": "<4.7.7", "fix_version": "4.7.7", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in handlebars\nThe package handlebars before 4.7.7 are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.\nUpgrade to version 4.7.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-21227", "package": "npm:sqlite3", "package_type": "npm", "package_usage": "optional", "version": ">=5.0.0-<5.0.3", "fix_version": "5.0.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service when binding invalid parameters in sqlite3\nAffected versions of sqlite3 will experience a fatal error when supplying a specific object in the parameter array. This error causes the application to crash and could not be caught. Users of `sqlite3` v5.0.0, v5.0.1 and v5.0.2 are affected by this. This issue is fixed in v5.0.3. All users are recommended to upgrade to v5.0.3 or later. Ensure there is sufficient sanitization in the parent application to protect against invalid values being supplied to binding parameters as a workaround.\n\nUpgrade to version 5.0.3 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37713", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some path`.  If the drive letter does not match the extraction target, for example `D: extraction dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37712", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi code point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, ` ` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37701", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.16", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both ` ` and `/` characters as path separators, however ` ` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing ` ` with `/` on Windows systems, and leaving ` ` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case insensitively.  This _may_ result in undue cache misses on case sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well tested method such as `path.resolve()` before comparing paths to one another.\nUpgrade to version 4.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32804", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<3.2.2", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE 2021 32803 (https://github.com/npm/node tar/security/advisories/GHSA r628 mhmh qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE 2021 32803 as well if this adjacent issue affects your `node tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32640", "package": "npm:ws", "package_type": "npm", "package_usage": "optional", "version": ">=7.0.0-<7.4.6", "fix_version": "7.4.6", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# ReDoS in Sec Websocket Protocol header\n### Impact\n\nA specially crafted value of the `Sec Websocket Protocol` header can be used to significantly slow down a ws server.\n\n### Proof of concept\n\n```js\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000 ) {\n  const value = 'b' + ' '.repeat(length) + 'x';\n  const start = process.hrtime.bigint();\n\n  value.trim().split(/ *, */);\n\n  const end = process.hrtime.bigint();\n\n  console.log('length = %d, time = %f ns', length, end   start);\n}\n```\n\n### Patches\n\nThe vulnerability was fixed in ws@7.4.6 (https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff) and backported to ws@6.2.2 (https://github.com/websockets/ws/commit/78c676d2a1acefbc05292e9f7ea0a9457704bf1b) and ws@5.2.3 (https://github.com/websockets/ws/commit/76d47c1479002022a3e4357b3c9f0e23a68d4cd2).\n\n### Workarounds\n\nIn vulnerable versions of ws, the issue can be mitigated by reducing the maximum allowed length of the request headers using the [`  max http header size=size` (https://nodejs.org/api/cli.html#cli_max_http_header_size_size) and/or the [`maxHeaderSize` (https://nodejs.org/api/http.html#http_http_createserver_options_requestlistener) options.\n\n### Credits\n\nThe vulnerability was responsibly disclosed along with a fix in private by [Robert McLaughlin (https://github.com/robmcl4) from University of California, Santa Barbara.\n\nUpgrade to version 7.4.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32803", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<3.2.3", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 3.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2022-33987", "package": "npm:got", "package_type": "npm", "package_usage": "optional", "version": "<11.8.5", "fix_version": "11.8.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Got allows a redirect to a UNIX socket\nThe got package before 11.8.5 and 12.1.0 for Node.js allows a redirect to a UNIX socket.\nUpgrade to version 11.8.5 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24785", "package": "npm:moment", "package_type": "npm", "package_usage": "optional", "version": "<2.29.2", "fix_version": "2.29.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Path Traversal: 'dir/../../filename' in moment.locale\n### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo (https://github.com/moment/moment)\n\nUpgrade to version 2.29.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "package_type": "npm", "package_usage": "optional", "version": "<0.4.0", "fix_version": "0.4.0", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema before version 0.4.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3777", "package": "npm:tmpl", "package_type": "npm", "package_usage": "optional", "version": "<1.0.5", "fix_version": "1.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# tmpl vulnerable to Inefficient Regular Expression Complexity which may lead to resource exhaustion\nnodejs tmpl is simple string formatting. tmpl is vulnerable to Inefficient Regular Expression Complexity which may lead to resource exhaustion.\nUpgrade to version 1.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23364", "package": "npm:browserslist", "package_type": "npm", "package_usage": "optional", "version": ">=4.0.0-<4.16.5", "fix_version": "4.16.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in browserslist\nThe package browserslist from 4.0.0 and before 4.16.5 are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.\nUpgrade to version 4.16.5 or later\n            ", "related_urls": []}
{"id": "NPM-1084253", "package": "npm:moment-timezone", "package_type": "npm", "package_usage": "optional", "version": ">=0.1.0-<0.5.35", "fix_version": "0.5.35", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Command Injection in moment timezone\n### Impact\n\nAll versions of moment timezone from 0.1.0 contain build tasks vulnerable to command injection.\n\n* if Alice uses tzdata pipeline to package moment timezone on her own (for example via `grunt data:2014d`, where `2014d` stands for the version of the tzdata to be used from IANA's website),\n* and Alice let's Mallory select the version (`2014d` in our example), then Mallory can execute arbitrary commands on the machine running the grunt task, with the same privilege as the grunt task\n\n#### Am I affected?\n\n##### Do you build custom versions of moment timezone with grunt?\n\nIf no, you're not affected.\n\n##### Do you allow a third party to specify which particular version you want build?\n\nIf yes, you're vulnerable to command injection    third party may execute arbitrary commands on the system running grunt task with the same privileges as grunt task.\n\n### Description\n\n#### Command Injection via grunt zdownload.js and MITM on iana's ftp endpoint\n\nThe `tasks/data download.js` script takes in a parameter from grunt and uses it to form a command line which is then executed:\n\n```\n6  module.exports = function (grunt) {\n7      grunt.registerTask('data download', '1. Download data from iana.org/time zones.', function (version) {\n8          version = version || 'latest';\n\n10          var done  = this.async(),\n11              src   = 'ftp://ftp.iana.org/tz/tzdata latest.tar.gz',\n12              curl  = path.resolve('temp/curl', version, 'data.tar.gz'),\n13              dest  = path.resolve('temp/download', version);\n...\n24          exec('curl ' + src + '  o ' + curl + ' && cd ' + dest + ' && gzip  dc ' + curl + ' | tar  xf  ', function (err) {\n```\n\nOrdinarily, one one run this script using something like `grunt data download:2014d`, in which case version would have the value `2014d`. However, if an attacker were to provide additional content on the command line, they would be able to execute arbitrary code\n\n```\nroot@e94ba0490b65:/usr/src/app/moment timezone# grunt 'data download:2014d ; echo flag>/tmp/foo #'\n Running \"data download:2014d ; echo flag>/tmp/foo #\" (data download) task\n>> Downloading https://data.iana.org/time zones/releases/tzdata2014d ; echo flag>/tmp/foo #.tar.gz\n>> Downloaded https://data.iana.org/time zones/releases/tzdata2014d ; echo flag>/tmp/foo #.tar.gz\n\nDone.\nroot@e94ba0490b65:/usr/src/app/moment timezone# cat /tmp/foo\nflag\n```\n\n#### Command Injection via data zdump.js\n\nThe `tasks/data zdump.js` script reads a list of files present in a temporary directory (created by previous tasks), and for each one, assembles and executes a command line without sanitization. As a result, an attacker able to influence the contents of that directory could gain code execution. This attack is exacerbated by timezone data being downloaded via cleartext FTP (described above), but beyond that, an attacker at iana.org able to modify the timezone files could disrupt any systems that build moment timezone.\n\n```\n15              files     = grunt.file.expand({ filter : 'isFile', cwd : 'temp/zic/' + version }, '**/*');\n...\n27          function next () {\n...\n33              var file = files.pop(),\n34                  src  = path.join(zicBase, file),\n35                  dest = path.join(zdumpBase, file);\n36              exec('zdump  v ' + src, { maxBuffer: 20*1024*1024 }, function (err, stdout) {\n```\n\nIn this case, an attacker able to add a file to `temp/zic/2014d` (for example) with a filename like `Z; curl www.example.com` would influence the called to exec on line 36 and run arbitrary code. There are a few minor challenges in exploiting this, since the string needs to be a valid filename.\n\n#### Command Injection via data zic.js\n\nSimilar to the vulnerability in /tasks/data download.js, the /tasks/data zic.js script takes a version from the command line and uses it as part of a command line, executed without sanitization.\n\n```\n10          var done  = this.async(),\n11              dest  = path.resolve('temp/zic', version),\n...\n22              var file = files.shift(),\n23                  src = path.resolve('temp/download', version, file);\n24\n25              exec('zic  d ' + dest + ' ' + src, function (err) {\n```\n\nAs a result, an attacker able to influence that string can run arbitrary commands. Of course, it requires an attacker able to influence the command passed to grunt, so may be unlikely in practice.\n\n```\nroot@e94ba0490b65:/usr/src/app/moment timezone# grunt 'data zic:2014d; echo hi > /tmp/evil; echo '\nRunning \"data zic:2014d; echo hi > /tmp/evil; echo \" (data zic) task\nexec: zid  d /usr/src/app/moment timezone/temp/zic/2014d; echo hi > /tmp/evil; echo  /usr/src/app/moment timezone/temp/download/2014d; echo hi > /tmp/evil; echo /africa\n...\n\nroot@e94ba0490b65:/usr/src/app/moment timezone# cat /tmp/evil\nhi\n```\n\n### Patches\n\nThe supplied patch on top of 0.5.34 is applicable with minor tweaks to all affected versions. It switches `exec` to `execFile` so arbitrary bash fragments won't be executed any more.\n\n### References\n\n* https://knowledge base.secureflag.com/vulnerabilities/code_injection/os_command_injection_nodejs.html\n* https://auth0.com/blog/preventing command injection attacks in node js apps/\nUpgrade to version 0.5.35 or later\n            ", "related_urls": []}
{"id": "NPM-1084254", "package": "npm:moment-timezone", "package_type": "npm", "package_usage": "optional", "version": ">=0.1.0-<0.5.35", "fix_version": "0.5.35", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cleartext Transmission of Sensitive Information in moment timezone\n### Impact\n\n* if Alice uses `grunt data` (or `grunt release`) to prepare a custom build, moment timezone with the latest tzdata from IANA's website\n* and Mallory intercepts the request to IANA's unencrypted ftp server, Mallory can serve data which might exploit further stages of the moment timezone tzdata pipeline, or potentially produce a tainted version of moment timezone (practicality of such attacks is not proved)\n\n### Patches\nProblem has been patched in version 0.5.35, patch should be applicable with minor modifications to all affected versions. The patch includes changing the FTP endpoint with an HTTPS endpoint.\n\n### Workarounds\nSpecify the exact version of tzdata (like `2014d`, full command being `grunt data:2014d`, then run the rest of the release tasks by hand), or just apply the patch before issuing the grunt command.\n\nUpgrade to version 0.5.35 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23369", "package": "npm:handlebars", "package_type": "npm", "package_usage": "optional", "version": "<4.7.7", "fix_version": "4.7.7", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Remote code execution in handlebars when compiling templates\nThe package handlebars before 4.7.7 are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\nUpgrade to version 4.7.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-31129", "package": "npm:moment", "package_type": "npm", "package_usage": "optional", "version": ">=2.18.0-<2.29.4", "fix_version": "2.29.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Moment.js vulnerable to Inefficient Regular Expression Complexity\n### Impact\n\n* using string to date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N 2) complexity on specific inputs\n* noticeable slowdown is observed with inputs above 10k characters\n* users who pass user provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks\n\n### Patches\nThe problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.\n\n### Workarounds\nIn general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date time strings longer than that, so all moment users who do pass a user originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.\n\n### References\nThere is an excellent writeup of the issue here: https://github.com/moment/moment/pull/6015#issuecomment 1152961973=\n\n### Details\nThe issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. `moment(\"(\".repeat(500000))` will take a few minutes to process, which is unacceptable.\nUpgrade to version 2.29.4 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3807", "package": "npm:ansi-regex", "package_type": "npm", "package_usage": "optional", "version": ">=5.0.0-<5.0.1", "fix_version": "4.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Inefficient Regular Expression Complexity in chalk/ansi regex\nansi regex is vulnerable to Inefficient Regular Expression Complexity which could lead to a denial of service.\nUpgrade to version 5.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-3517", "package": "npm:minimatch", "package_type": "npm", "package_usage": "optional", "version": "<3.0.5", "fix_version": "3.0.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# minimatch ReDoS vulnerability\nA vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.\nUpgrade to version 3.0.5 or later\n            ", "related_urls": []}
{"id": "CVE-2022-33154", "package": "istanbuljs:schema", "package_type": "schema_project", "package_usage": "optional", "version": "<1.13.1", "fix_version": "1.13.1", "severity": "MEDIUM", "cvss_score": "5.4", "short_description": "The schema (aka Embedding schema.org vocabulary) extension before 1.13.1 and 2.x before 2.5.1 for TYPO3 allows XSS.", "related_urls": ["https://typo3.org/security/advisory/typo3-ext-sa-2022-012"]}
{"id": "CVE-2020-7774", "package": "npm:y18n", "package_type": "npm", "package_usage": "optional", "version": "4.0.0", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "The package y18n before 3.2.2, 4.0.1 and 5.0.5, is vulnerable to Prototype Pollution.", "related_urls": ["https://github.com/yargs/y18n/issues/96", "https://github.com/yargs/y18n/pull/108", "https://snyk.io/vuln/SNYK-JS-Y18N-1021887", "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306", "https://www.oracle.com/security-alerts/cpuApr2021.html", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf"]}
