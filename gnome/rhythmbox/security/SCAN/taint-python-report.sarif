{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Python Security Analysis",
          "rules": [
            {
              "id": "taint-rce",
              "help": {
                "text": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\nThis could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
                "markdown": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\nThis could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input."
              },
              "name": "Remote Code Execution",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/78.html",
              "shortDescription": {
                "text": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')."
              }
            },
            {
              "id": "taint-traversal",
              "help": {
                "text": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\nMany file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.",
                "markdown": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\nMany file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction."
              },
              "name": "Directory Traversal",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory."
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/22.html",
              "shortDescription": {
                "text": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')."
              }
            },
            {
              "id": "taint-file-write",
              "help": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.",
                "markdown": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\nWhen a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."
              },
              "name": "File Write",
              "properties": {
                "tags": [
                  "Scan"
                ],
                "precision": "high"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/732.html",
              "shortDescription": {
                "text": "Incorrect Permission Assignment for Critical Resource."
              }
            }
          ],
          "version": "1.0.0-scan",
          "fullName": "Python Security Analysis"
        }
      },
      "conversion": {
        "tool": {
          "driver": {
            "name": "@ShiftLeft/sast-scan"
          }
        },
        "invocation": {
          "arguments": [
            "-j",
            "-a",
            "e",
            "-o",
            "/github/workspace/reports/taint-python-report.json"
          ],
          "executionSuccessful": true,
          "commandLine": "-j -a e -o /github/workspace/reports/taint-python-report.json",
          "endTimeUtc": "2023-02-22T08:32:43Z",
          "workingDirectory": {
            "uri": "https://github.com/gnome/rhythmbox"
          }
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "endTimeUtc": "2023-02-22T08:32:43Z",
          "workingDirectory": {
            "uri": "https://github.com/gnome/rhythmbox"
          }
        }
      ],
      "properties": {
        "metrics": {
          "total": 5,
          "critical": 5,
          "high": 0,
          "medium": 0,
          "low": 0
        }
      },
      "results": [
        {
          "message": {
            "markdown": "",
            "text": "Remote Code Execution via shell with user data from `s in siphash.py:239` used for constructing the command at `siphash.py:241`."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    def relaxed_eval(s):\n"
                  },
                  "startLine": 239
                },
                "artifactLocation": {
                  "uri": "https://github.com/gnome/rhythmbox/plugins/webremote/siphash.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n    def relaxed_eval(s):\n        if s.strip():\n            return eval(s)\n"
                  },
                  "endLine": 241,
                  "startLine": 238
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "CRITICAL",
            "issue_tags": {
              "source_trigger_word": "Framework function URL parameter",
              "source_label": "s",
              "source_type": "Framework_Parameter",
              "sink_trigger_word": "eval(",
              "sink_label": "~call_1 = ret_eval(s)",
              "sink_type": "RemoteCodeExecution"
            }
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "346c8534d87f0617",
            "scanTagsHash": "ef18d5f74250ed2f",
            "scanFileHash": "95c5aa7092275cb3"
          },
          "ruleId": "taint-rce",
          "ruleIndex": 0
        },
        {
          "message": {
            "markdown": "",
            "text": "Exfiltration of data (Path Traversal) due to user data from `filename in webremote.py:387` influencing file operations in `webremote.py:389`."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\tdef send_file_response(self, msg, filename, content_type):\n"
                  },
                  "startLine": 387
                },
                "artifactLocation": {
                  "uri": "https://github.com/gnome/rhythmbox/plugins/webremote/webremote.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\tdef send_file_response(self, msg, filename, content_type):\n\t\ttry:\n\t\t\tfp = open(filename, 'rb')\n"
                  },
                  "endLine": 389,
                  "startLine": 386
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "CRITICAL",
            "issue_tags": {
              "source_trigger_word": "Framework function URL parameter",
              "source_label": "filename",
              "source_type": "Framework_Parameter",
              "sink_trigger_word": "open(",
              "sink_label": "~call_1 = ret_open(filename, rb)",
              "sink_type": "Exfiltration"
            }
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "42813b0faaa85489",
            "scanTagsHash": "ca48ec4ec59195c0",
            "scanFileHash": "c8350cd318a060b8"
          },
          "ruleId": "taint-traversal",
          "ruleIndex": 1
        },
        {
          "message": {
            "markdown": "",
            "text": "User data from `data in URLCache.py:144` is used in `URLCache.py:156` for file operations."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    def store(self, key, data):\n"
                  },
                  "startLine": 144
                },
                "artifactLocation": {
                  "uri": "https://github.com/gnome/rhythmbox/plugins/rb/URLCache.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n    def store(self, key, data):\n        \"\"\"\n        Stores an entry in the cache.\n"
                  },
                  "endLine": 146,
                  "startLine": 143
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "CRITICAL",
            "issue_tags": {
              "source_trigger_word": "Framework function URL parameter",
              "source_label": "data",
              "source_type": "Framework_Parameter",
              "sink_trigger_word": "f.write(",
              "sink_label": "~call_4 = ret_f.write(data)",
              "sink_type": "FileSystem"
            }
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "8b0e91938f2173e1",
            "scanTagsHash": "535f943b8896e2f2",
            "scanFileHash": "fab86c76437a8f8b"
          },
          "ruleId": "taint-file-write",
          "ruleIndex": 2
        },
        {
          "message": {
            "markdown": "",
            "text": "User data from `artist in lyrics.py:119` is used in `lyrics.py:131` for file operations."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "def build_cache_path(artist, title):\n"
                  },
                  "startLine": 119
                },
                "artifactLocation": {
                  "uri": "https://github.com/gnome/rhythmbox/plugins/lyrics/lyrics.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\t\ndef build_cache_path(artist, title):\n\tsettings = Gio.Settings.new(\"org.gnome.rhythmbox.plugins.lyrics\")\n\tfolder = settings['folder']\n"
                  },
                  "endLine": 121,
                  "startLine": 118
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "CRITICAL",
            "issue_tags": {
              "source_trigger_word": "Framework function URL parameter",
              "source_label": "artist",
              "source_type": "Framework_Parameter",
              "sink_trigger_word": "os.mkdir(",
              "sink_label": "~call_7 = ret_os.mkdir(artist_folder)",
              "sink_type": "FileSystem"
            }
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "605855929a396e9d",
            "scanTagsHash": "7dcefa7a0014341a",
            "scanFileHash": "8efa7ce2a319f4ee"
          },
          "ruleId": "taint-file-write",
          "ruleIndex": 2
        },
        {
          "message": {
            "markdown": "",
            "text": "User data from `text in lyrics.py:230` is used in `lyrics.py:232` for file operations."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "\tdef lyrics_found(self, text):\n"
                  },
                  "startLine": 230
                },
                "artifactLocation": {
                  "uri": "https://github.com/gnome/rhythmbox/plugins/lyrics/lyrics.py"
                },
                "contextRegion": {
                  "snippet": {
                    "text": "\n\tdef lyrics_found(self, text):\n\t\tf = open(self.cache_path, 'wt')\n\t\tf.write(text)\n"
                  },
                  "endLine": 232,
                  "startLine": 229
                }
              }
            }
          ],
          "properties": {
            "issue_confidence": "HIGH",
            "issue_severity": "CRITICAL",
            "issue_tags": {
              "source_trigger_word": "Framework function URL parameter",
              "source_label": "text",
              "source_type": "Framework_Parameter",
              "sink_trigger_word": "f.write(",
              "sink_label": "~call_2 = ret_f.write(text)",
              "sink_type": "FileSystem"
            }
          },
          "baselineState": "new",
          "partialFingerprints": {
            "scanPrimaryLocationHash": "edc36b95e6018c59",
            "scanTagsHash": "517439922300a9a4",
            "scanFileHash": "8efa7ce2a319f4ee"
          },
          "ruleId": "taint-file-write",
          "ruleIndex": 2
        }
      ],
      "automationDetails": {
        "description": {
          "text": "Static Analysis Security Test results using @ShiftLeft/sast-scan"
        },
        "guid": "dc62550c-ef2c-4bf8-8993-685bf2d77883"
      },
      "versionControlProvenance": [
        {
          "branch": "main",
          "repositoryUri": "https://github.com/spencerlepine/open-source-crawler",
          "revisionId": "735748ce709a4271f6944b183a2c0a8c2573b40f"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "inlineExternalProperties": [
    {
      "guid": "dc62550c-ef2c-4bf8-8993-685bf2d77883",
      "runGuid": "66743227-4d0d-4348-9d54-c3c7122a761a"
    }
  ]
}